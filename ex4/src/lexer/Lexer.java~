// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: ex4/src/oberon.flex

// Lexer description of Oberon-0 language
// Author: Linloir
// Reference: Dragon Book (UnderGraduate-ver) pp. 88

package lexer;

import exceptions.*;


@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1100\1\u1d00"+
    "\1\u1e00\1\u1f00\2\u2000\1\u2100\7\u2000\1\u2200\1\u2300\1\u2400"+
    "\1\u2000\1\u2500\1\u2600\2\u2000\31\u1100\1\u2700\121\u1100\1\u2800"+
    "\4\u1100\1\u2900\1\u1100\1\u2a00\1\u2b00\1\u2c00\1\u2d00\1\u2e00"+
    "\1\u2f00\53\u1100\1\u3000\41\u2000\1\u1100\1\u3100\1\u3200\1\u1100"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u3b00\1\u1100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u2000\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u2000\1\u4f00"+
    "\1\u5000\1\u5100\1\u2000\3\u1100\1\u5200\1\u5300\1\u5400\12\u2000"+
    "\4\u1100\1\u5500\17\u2000\2\u1100\1\u5600\41\u2000\2\u1100\1\u5700"+
    "\1\u5800\2\u2000\1\u5900\1\u5a00\27\u1100\1\u5b00\2\u1100\1\u5c00"+
    "\45\u2000\1\u1100\1\u5d00\1\u5e00\11\u2000\1\u5f00\24\u2000\1\u6000"+
    "\1\u6100\1\u2000\1\u6200\1\u6300\1\u6400\1\u6500\2\u2000\1\u6600"+
    "\5\u2000\1\u6700\1\u6800\1\u6900\5\u2000\1\u6a00\1\u6b00\4\u2000"+
    "\1\u6c00\2\u2000\1\u6d00\16\u2000\246\u1100\1\u6e00\20\u1100\1\u6f00"+
    "\1\u7000\25\u1100\1\u7100\34\u1100\1\u7200\14\u2000\2\u1100\1\u7300"+
    "\u0b06\u2000\1\u2800\u02fe\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\0\1\3\22\0\1\1\2\0"+
    "\1\4\2\0\1\5\1\0\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\0\12\15\1\16\1\17\1\20"+
    "\1\21\1\22\2\0\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\2\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\34\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\34\1\50\1\34\1\51\1\0\1\52\1\0"+
    "\1\53\1\0\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\2\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\34\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\34\1\50\1\34\3\0\1\54\53\0\1\53\12\0"+
    "\1\53\4\0\1\53\5\0\27\53\1\0\37\53\1\0"+
    "\70\53\2\55\115\53\1\56\u0142\53\4\0\14\53\16\0"+
    "\5\53\7\0\1\53\1\0\1\53\21\0\165\53\1\0"+
    "\2\53\2\0\4\53\1\0\1\53\6\0\1\53\1\0"+
    "\3\53\1\0\1\53\1\0\24\53\1\0\123\53\1\0"+
    "\213\53\1\0\255\53\1\0\46\53\2\0\1\53\6\0"+
    "\51\53\10\0\55\53\1\0\1\53\1\0\2\53\1\0"+
    "\2\53\1\0\1\53\10\0\33\53\4\0\4\53\35\0"+
    "\13\53\5\0\112\53\4\0\146\53\1\0\10\53\2\0"+
    "\12\53\1\0\23\53\2\0\1\53\20\0\73\53\2\0"+
    "\145\53\16\0\66\53\4\0\1\53\2\0\1\53\2\0"+
    "\56\53\22\0\34\53\4\0\13\53\65\0\25\53\1\0"+
    "\10\53\25\0\17\53\1\0\201\53\2\0\12\53\1\0"+
    "\23\53\1\0\10\53\2\0\2\53\2\0\26\53\1\0"+
    "\7\53\1\0\1\53\3\0\4\53\2\0\11\53\2\0"+
    "\2\53\2\0\4\53\10\0\1\53\4\0\2\53\1\0"+
    "\5\53\2\0\14\53\12\0\1\53\1\0\1\53\2\0"+
    "\3\53\1\0\6\53\4\0\2\53\2\0\26\53\1\0"+
    "\7\53\1\0\2\53\1\0\2\53\1\0\2\53\2\0"+
    "\1\53\1\0\5\53\4\0\2\53\2\0\3\53\3\0"+
    "\1\53\7\0\4\53\1\0\1\53\7\0\20\53\13\0"+
    "\3\53\1\0\11\53\1\0\3\53\1\0\26\53\1\0"+
    "\7\53\1\0\2\53\1\0\5\53\2\0\12\53\1\0"+
    "\3\53\1\0\3\53\2\0\1\53\17\0\4\53\2\0"+
    "\12\53\11\0\7\53\1\0\3\53\1\0\10\53\2\0"+
    "\2\53\2\0\26\53\1\0\7\53\1\0\2\53\1\0"+
    "\5\53\2\0\11\53\2\0\2\53\2\0\3\53\10\0"+
    "\2\53\4\0\2\53\1\0\5\53\2\0\12\53\1\0"+
    "\1\53\20\0\2\53\1\0\6\53\3\0\3\53\1\0"+
    "\4\53\3\0\2\53\1\0\1\53\1\0\2\53\3\0"+
    "\2\53\3\0\3\53\3\0\14\53\4\0\5\53\3\0"+
    "\3\53\1\0\4\53\2\0\1\53\6\0\1\53\16\0"+
    "\12\53\20\0\15\53\1\0\3\53\1\0\27\53\1\0"+
    "\20\53\3\0\10\53\1\0\3\53\1\0\4\53\7\0"+
    "\2\53\1\0\3\53\5\0\4\53\2\0\12\53\20\0"+
    "\4\53\1\0\10\53\1\0\3\53\1\0\27\53\1\0"+
    "\12\53\1\0\5\53\2\0\11\53\1\0\3\53\1\0"+
    "\4\53\7\0\2\53\7\0\1\53\1\0\4\53\2\0"+
    "\12\53\1\0\2\53\15\0\4\53\1\0\10\53\1\0"+
    "\3\53\1\0\63\53\1\0\3\53\1\0\5\53\5\0"+
    "\4\53\7\0\5\53\2\0\12\53\12\0\6\53\2\0"+
    "\2\53\1\0\22\53\3\0\30\53\1\0\11\53\1\0"+
    "\1\53\2\0\7\53\3\0\1\53\4\0\6\53\1\0"+
    "\1\53\1\0\10\53\6\0\12\53\2\0\2\53\15\0"+
    "\72\53\5\0\17\53\1\0\12\53\47\0\2\53\1\0"+
    "\1\53\1\0\5\53\1\0\30\53\1\0\1\53\1\0"+
    "\27\53\2\0\5\53\1\0\1\53\1\0\6\53\2\0"+
    "\12\53\2\0\4\53\40\0\1\53\27\0\2\53\6\0"+
    "\12\53\13\0\1\53\1\0\1\53\1\0\1\53\4\0"+
    "\12\53\1\0\44\53\4\0\24\53\1\0\22\53\1\0"+
    "\44\53\11\0\1\53\71\0\112\53\6\0\116\53\2\0"+
    "\46\53\1\0\1\53\5\0\1\53\2\0\53\53\1\0"+
    "\u014d\53\1\0\4\53\2\0\7\53\1\0\1\53\1\0"+
    "\4\53\2\0\51\53\1\0\4\53\2\0\41\53\1\0"+
    "\4\53\2\0\7\53\1\0\1\53\1\0\4\53\2\0"+
    "\17\53\1\0\71\53\1\0\4\53\2\0\103\53\2\0"+
    "\3\53\40\0\20\53\20\0\126\53\2\0\6\53\3\0"+
    "\u016c\53\2\0\21\53\1\0\32\53\5\0\113\53\3\0"+
    "\13\53\7\0\15\53\1\0\7\53\13\0\25\53\13\0"+
    "\24\53\14\0\15\53\1\0\3\53\1\0\2\53\14\0"+
    "\124\53\3\0\1\53\4\0\2\53\2\0\12\53\41\0"+
    "\3\53\2\0\12\53\6\0\131\53\7\0\53\53\5\0"+
    "\106\53\12\0\37\53\1\0\14\53\4\0\14\53\12\0"+
    "\50\53\2\0\5\53\13\0\54\53\4\0\32\53\6\0"+
    "\12\53\46\0\34\53\4\0\77\53\1\0\35\53\2\0"+
    "\13\53\6\0\12\53\15\0\1\53\10\0\17\53\101\0"+
    "\114\53\4\0\12\53\21\0\11\53\14\0\164\53\14\0"+
    "\70\53\10\0\12\53\3\0\61\53\2\0\11\53\7\0"+
    "\53\53\2\0\3\53\20\0\3\53\1\0\47\53\5\0"+
    "\372\53\1\0\33\53\2\0\6\53\2\0\46\53\2\0"+
    "\6\53\2\0\10\53\1\0\1\53\1\0\1\53\1\0"+
    "\1\53\1\0\37\53\2\0\65\53\1\0\7\53\1\0"+
    "\1\53\3\0\3\53\1\0\7\53\3\0\4\53\2\0"+
    "\6\53\4\0\15\53\5\0\3\53\1\0\7\53\102\0"+
    "\2\53\23\0\1\53\34\0\1\53\15\0\1\53\20\0"+
    "\15\53\63\0\41\53\21\0\1\53\4\0\1\53\2\0"+
    "\12\53\1\0\1\53\3\0\5\53\6\0\1\53\1\0"+
    "\1\53\1\0\1\53\1\0\4\53\1\0\13\53\2\0"+
    "\4\53\5\0\5\53\4\0\1\53\21\0\51\53\u022d\0"+
    "\64\53\26\0\57\53\1\0\57\53\1\0\205\53\6\0"+
    "\11\53\14\0\46\53\1\0\1\53\5\0\1\53\2\0"+
    "\70\53\7\0\1\53\17\0\30\53\11\0\7\53\1\0"+
    "\7\53\1\0\7\53\1\0\7\53\1\0\7\53\1\0"+
    "\7\53\1\0\7\53\1\0\7\53\1\0\40\53\57\0"+
    "\1\53\325\0\3\53\31\0\17\53\1\0\5\53\2\0"+
    "\5\53\4\0\126\53\2\0\2\53\2\0\3\53\1\0"+
    "\132\53\1\0\4\53\5\0\53\53\1\0\136\53\21\0"+
    "\33\53\65\0\306\53\112\0\360\53\20\0\215\53\103\0"+
    "\56\53\2\0\15\53\3\0\34\53\24\0\63\53\1\0"+
    "\12\53\1\0\163\53\45\0\11\53\2\0\147\53\2\0"+
    "\65\53\2\0\5\53\60\0\61\53\30\0\64\53\14\0"+
    "\106\53\12\0\12\53\6\0\30\53\3\0\1\53\1\0"+
    "\61\53\2\0\44\53\14\0\35\53\3\0\101\53\16\0"+
    "\13\53\6\0\37\53\1\0\67\53\11\0\16\53\2\0"+
    "\12\53\6\0\27\53\3\0\111\53\30\0\3\53\2\0"+
    "\20\53\2\0\5\53\12\0\6\53\2\0\6\53\2\0"+
    "\6\53\11\0\7\53\1\0\7\53\1\0\53\53\1\0"+
    "\14\53\10\0\173\53\1\0\2\53\2\0\12\53\6\0"+
    "\244\53\14\0\27\53\4\0\61\53\4\0\156\53\2\0"+
    "\152\53\46\0\7\53\14\0\5\53\5\0\14\53\1\0"+
    "\15\53\1\0\5\53\1\0\1\53\1\0\2\53\1\0"+
    "\2\53\1\0\154\53\41\0\153\53\22\0\100\53\2\0"+
    "\66\53\50\0\14\53\4\0\20\53\20\0\20\53\3\0"+
    "\2\53\30\0\3\53\40\0\5\53\1\0\207\53\23\0"+
    "\12\53\7\0\32\53\4\0\1\53\1\0\32\53\13\0"+
    "\131\53\3\0\6\53\2\0\6\53\2\0\6\53\2\0"+
    "\3\53\43\0\14\53\1\0\32\53\1\0\23\53\1\0"+
    "\2\53\1\0\17\53\2\0\16\53\42\0\173\53\105\0"+
    "\65\53\210\0\1\53\202\0\35\53\3\0\61\53\17\0"+
    "\1\53\37\0\40\53\15\0\36\53\5\0\53\53\5\0"+
    "\36\53\2\0\44\53\4\0\10\53\1\0\5\53\52\0"+
    "\236\53\2\0\12\53\6\0\44\53\4\0\44\53\4\0"+
    "\50\53\10\0\64\53\234\0\67\53\11\0\26\53\12\0"+
    "\10\53\230\0\6\53\2\0\1\53\1\0\54\53\1\0"+
    "\2\53\3\0\1\53\2\0\27\53\12\0\27\53\11\0"+
    "\37\53\101\0\23\53\1\0\2\53\12\0\26\53\12\0"+
    "\32\53\106\0\70\53\6\0\2\53\100\0\4\53\1\0"+
    "\2\53\5\0\10\53\1\0\3\53\1\0\35\53\2\0"+
    "\3\53\4\0\1\53\40\0\35\53\3\0\35\53\43\0"+
    "\10\53\1\0\36\53\31\0\66\53\12\0\26\53\12\0"+
    "\23\53\15\0\22\53\156\0\111\53\67\0\63\53\15\0"+
    "\63\53\15\0\50\53\10\0\12\53\306\0\35\53\12\0"+
    "\1\53\10\0\41\53\217\0\27\53\11\0\107\53\37\0"+
    "\12\53\17\0\74\53\25\0\31\53\7\0\12\53\6\0"+
    "\65\53\1\0\12\53\4\0\3\53\11\0\44\53\2\0"+
    "\1\53\11\0\105\53\4\0\4\53\3\0\13\53\1\0"+
    "\1\53\43\0\22\53\1\0\45\53\6\0\1\53\101\0"+
    "\7\53\1\0\1\53\1\0\4\53\1\0\17\53\1\0"+
    "\12\53\7\0\73\53\5\0\12\53\6\0\4\53\1\0"+
    "\10\53\2\0\2\53\2\0\26\53\1\0\7\53\1\0"+
    "\2\53\1\0\5\53\1\0\12\53\2\0\2\53\2\0"+
    "\3\53\2\0\1\53\6\0\1\53\5\0\7\53\2\0"+
    "\7\53\3\0\5\53\213\0\113\53\5\0\12\53\4\0"+
    "\2\53\40\0\106\53\1\0\1\53\10\0\12\53\246\0"+
    "\66\53\2\0\11\53\27\0\6\53\42\0\101\53\3\0"+
    "\1\53\13\0\12\53\46\0\71\53\7\0\12\53\66\0"+
    "\33\53\2\0\17\53\4\0\12\53\306\0\73\53\145\0"+
    "\112\53\25\0\1\53\240\0\10\53\2\0\56\53\2\0"+
    "\10\53\1\0\2\53\33\0\77\53\10\0\1\53\10\0"+
    "\112\53\3\0\1\53\42\0\71\53\7\0\11\53\1\0"+
    "\55\53\1\0\11\53\17\0\12\53\30\0\36\53\2\0"+
    "\26\53\1\0\16\53\111\0\7\53\1\0\2\53\1\0"+
    "\54\53\3\0\1\53\1\0\2\53\1\0\11\53\10\0"+
    "\12\53\6\0\6\53\1\0\2\53\1\0\45\53\1\0"+
    "\2\53\1\0\6\53\7\0\12\53\u0136\0\27\53\11\0"+
    "\232\53\146\0\157\53\21\0\304\53\274\0\57\53\321\0"+
    "\107\53\271\0\71\53\7\0\37\53\1\0\12\53\146\0"+
    "\36\53\2\0\5\53\13\0\67\53\11\0\4\53\14\0"+
    "\12\53\11\0\25\53\5\0\23\53\260\0\100\53\200\0"+
    "\113\53\4\0\71\53\7\0\21\53\100\0\2\53\1\0"+
    "\1\53\34\0\370\53\10\0\363\53\15\0\37\53\61\0"+
    "\3\53\21\0\4\53\10\0\u018c\53\4\0\153\53\5\0"+
    "\15\53\3\0\11\53\7\0\12\53\3\0\2\53\306\0"+
    "\5\53\3\0\6\53\10\0\10\53\2\0\7\53\36\0"+
    "\4\53\224\0\3\53\273\0\125\53\1\0\107\53\1\0"+
    "\2\53\2\0\1\53\2\0\2\53\2\0\4\53\1\0"+
    "\14\53\1\0\1\53\1\0\7\53\1\0\101\53\1\0"+
    "\4\53\2\0\10\53\1\0\7\53\1\0\34\53\1\0"+
    "\4\53\1\0\5\53\1\0\1\53\3\0\7\53\1\0"+
    "\u0154\53\2\0\31\53\1\0\31\53\1\0\37\53\1\0"+
    "\31\53\1\0\37\53\1\0\31\53\1\0\37\53\1\0"+
    "\31\53\1\0\37\53\1\0\31\53\1\0\10\53\2\0"+
    "\151\53\4\0\62\53\10\0\1\53\16\0\1\53\26\0"+
    "\5\53\1\0\17\53\120\0\7\53\1\0\21\53\2\0"+
    "\7\53\1\0\2\53\1\0\5\53\325\0\55\53\3\0"+
    "\16\53\2\0\12\53\4\0\1\53\u0171\0\72\53\6\0"+
    "\305\53\13\0\7\53\51\0\114\53\4\0\12\53\246\0"+
    "\4\53\1\0\33\53\1\0\2\53\1\0\1\53\2\0"+
    "\1\53\1\0\12\53\1\0\4\53\1\0\1\53\1\0"+
    "\1\53\6\0\1\53\4\0\1\53\1\0\1\53\1\0"+
    "\1\53\1\0\3\53\1\0\2\53\1\0\1\53\2\0"+
    "\1\53\1\0\1\53\1\0\1\53\1\0\1\53\1\0"+
    "\1\53\1\0\2\53\1\0\1\53\2\0\4\53\1\0"+
    "\7\53\1\0\4\53\1\0\4\53\1\0\1\53\1\0"+
    "\12\53\1\0\21\53\5\0\3\53\1\0\5\53\1\0"+
    "\21\53\164\0\32\53\6\0\32\53\6\0\32\53\166\0"+
    "\327\53\51\0\65\53\13\0\336\53\2\0\u0182\53\16\0"+
    "\u0131\53\37\0\36\53\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29696];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\16\22\1\23\1\24\1\25\1\1\1\26"+
    "\1\27\1\30\1\31\5\22\1\32\1\0\2\22\1\33"+
    "\2\22\1\34\1\35\6\22\1\33\3\0\4\22\2\36"+
    "\1\22\1\0\1\37\1\22\1\40\4\22\1\41\1\22"+
    "\2\0\1\42\2\22\1\0\2\22\1\0\1\43\1\22"+
    "\1\0\1\43\4\22\1\44\1\45\1\22\2\0\1\46"+
    "\2\47\1\22\2\50\2\51\4\22\2\52\1\0\2\22"+
    "\1\53\1\22\1\54\1\0\1\55\1\56\1\22\1\56"+
    "\1\22\1\57";

  private static int [] zzUnpackAction() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\57\0\136\0\57\0\57\0\215\0\57"+
    "\0\57\0\57\0\57\0\57\0\57\0\274\0\353\0\57"+
    "\0\u011a\0\57\0\u0149\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234"+
    "\0\u0263\0\u0292\0\u02c1\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac"+
    "\0\u03db\0\57\0\57\0\57\0\u040a\0\u0439\0\57\0\57"+
    "\0\57\0\u0468\0\u0497\0\u04c6\0\u04f5\0\u0524\0\u0263\0\u0553"+
    "\0\u0582\0\u05b1\0\u0263\0\u05e0\0\u060f\0\u0263\0\u0263\0\u063e"+
    "\0\u066d\0\u069c\0\u06cb\0\u06fa\0\u0729\0\57\0\u0758\0\u0439"+
    "\0\u0787\0\u07b6\0\u07e5\0\u0814\0\u0843\0\u0263\0\57\0\u0872"+
    "\0\u08a1\0\u0263\0\u08d0\0\u08ff\0\u092e\0\u095d\0\u098c\0\u09bb"+
    "\0\u0263\0\u09ea\0\u0a19\0\u0a48\0\57\0\u0a77\0\u0aa6\0\u0ad5"+
    "\0\u0b04\0\u0b33\0\u0b62\0\u0263\0\u0b91\0\u0bc0\0\57\0\u0bef"+
    "\0\u0c1e\0\u0c4d\0\u0c7c\0\u0263\0\u0263\0\u0cab\0\u0cda\0\u0d09"+
    "\0\u0263\0\u0263\0\57\0\u0d38\0\u0263\0\57\0\u0263\0\57"+
    "\0\u0d67\0\u0d96\0\u0dc5\0\u0df4\0\u0263\0\57\0\u0e23\0\u0e52"+
    "\0\u0e81\0\u0263\0\u0eb0\0\u0263\0\u0edf\0\u0263\0\u0263\0\u0f0e"+
    "\0\57\0\u0f3d\0\u0263";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\3\31"+
    "\1\32\2\31\1\33\1\31\1\34\1\35\1\36\1\31"+
    "\1\37\1\31\1\40\1\41\1\31\1\42\1\43\1\2"+
    "\1\44\1\45\1\2\61\0\1\3\64\0\1\46\63\0"+
    "\1\16\5\0\26\16\2\0\1\16\1\0\2\16\21\0"+
    "\1\47\56\0\1\50\56\0\1\51\52\0\1\31\5\0"+
    "\17\31\1\52\6\31\23\0\1\31\5\0\4\31\1\53"+
    "\10\31\1\54\10\31\23\0\1\31\5\0\15\31\1\55"+
    "\10\31\23\0\1\31\5\0\10\31\1\56\4\31\1\57"+
    "\10\31\4\0\1\60\16\0\1\31\5\0\12\31\1\61"+
    "\1\31\1\62\11\31\23\0\1\31\5\0\26\31\23\0"+
    "\1\31\5\0\5\31\1\63\6\31\1\64\11\31\23\0"+
    "\1\31\5\0\15\31\1\65\10\31\23\0\1\31\5\0"+
    "\5\31\1\66\11\31\1\67\6\31\23\0\1\31\5\0"+
    "\17\31\1\70\6\31\23\0\1\31\5\0\4\31\1\71"+
    "\21\31\23\0\1\31\5\0\7\31\1\72\15\31\1\73"+
    "\23\0\1\31\5\0\1\74\25\31\23\0\1\31\5\0"+
    "\7\31\1\75\16\31\36\0\1\76\6\0\1\77\17\0"+
    "\10\100\1\101\46\100\15\0\1\31\5\0\17\31\1\102"+
    "\6\31\23\0\1\31\5\0\6\31\1\103\17\31\23\0"+
    "\1\31\5\0\15\31\1\104\10\31\23\0\1\31\5\0"+
    "\14\31\1\105\11\31\23\0\1\31\5\0\23\31\1\106"+
    "\2\31\54\0\1\107\25\0\1\31\5\0\20\31\1\110"+
    "\5\31\5\0\1\111\15\0\1\31\5\0\3\31\1\112"+
    "\22\31\23\0\1\31\5\0\21\31\1\113\4\31\23\0"+
    "\1\31\5\0\3\31\1\114\22\31\23\0\1\31\5\0"+
    "\15\31\1\115\10\31\23\0\1\31\5\0\2\31\1\116"+
    "\23\31\23\0\1\31\5\0\4\31\1\117\21\31\23\0"+
    "\1\31\5\0\16\31\1\120\7\31\23\0\1\31\5\0"+
    "\17\31\1\121\6\31\23\0\1\31\5\0\10\31\1\122"+
    "\15\31\4\0\1\123\45\0\1\124\12\0\7\100\1\125"+
    "\1\101\46\100\15\0\1\31\5\0\1\126\25\31\23\0"+
    "\1\31\5\0\10\31\1\127\15\31\4\0\1\130\16\0"+
    "\1\31\5\0\12\31\1\131\13\31\23\0\1\31\5\0"+
    "\20\31\1\132\5\31\5\0\1\133\15\0\1\31\5\0"+
    "\4\31\1\134\3\31\1\135\15\31\4\0\1\136\30\0"+
    "\1\137\3\0\1\136\21\0\1\136\16\0\1\31\5\0"+
    "\4\31\1\140\21\31\23\0\1\31\5\0\22\31\1\141"+
    "\3\31\23\0\1\31\5\0\2\31\1\142\23\31\23\0"+
    "\1\31\5\0\15\31\1\143\10\31\23\0\1\31\5\0"+
    "\14\31\1\144\11\31\23\0\1\31\5\0\4\31\1\145"+
    "\21\31\23\0\1\31\5\0\12\31\1\146\13\31\43\0"+
    "\1\147\50\0\1\150\44\0\1\31\5\0\25\31\1\151"+
    "\23\0\1\31\5\0\14\31\1\152\11\31\45\0\1\153"+
    "\34\0\1\31\5\0\4\31\1\154\21\31\23\0\1\31"+
    "\5\0\21\31\1\155\4\31\52\0\1\156\27\0\1\31"+
    "\5\0\5\31\1\157\20\31\36\0\1\160\43\0\1\31"+
    "\5\0\6\31\1\161\17\31\23\0\1\31\5\0\12\31"+
    "\1\162\13\31\23\0\1\31\5\0\4\31\1\163\21\31"+
    "\23\0\1\31\5\0\17\31\1\164\6\31\23\0\1\31"+
    "\5\0\4\31\1\165\21\31\35\0\1\166\60\0\1\167"+
    "\42\0\1\31\5\0\1\170\25\31\23\0\1\31\5\0"+
    "\4\31\1\171\21\31\23\0\1\31\5\0\4\31\1\172"+
    "\21\31\23\0\1\31\5\0\3\31\1\173\22\31\23\0"+
    "\1\31\5\0\3\31\1\174\22\31\35\0\1\175\44\0"+
    "\1\31\5\0\14\31\1\176\11\31\23\0\1\31\5\0"+
    "\17\31\1\177\6\31\23\0\1\31\5\0\22\31\1\200"+
    "\3\31\50\0\1\201\31\0\1\31\5\0\17\31\1\202"+
    "\6\31\23\0\1\31\5\0\4\31\1\203\21\31\6\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[3948];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\2\11\1\1\6\11\2\1\1\11"+
    "\1\1\1\11\17\1\3\11\2\1\3\11\6\1\1\0"+
    "\15\1\1\11\3\0\5\1\1\11\1\1\1\0\11\1"+
    "\2\0\1\11\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\1\11\7\1\2\0\2\1\1\11\2\1\1\11\1\1"+
    "\1\11\5\1\1\11\1\0\5\1\1\0\3\1\1\11"+
    "\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    // Some class methods



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public Token next_token() throws java.io.IOException
    , OberonException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return Symbol.eof(yyline + 1, yycolumn + 1);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /* Unknown error, read one character */
                        throw new LexicalException("Unknown error");
            }
          // fall through
          case 48: break;
          case 2:
            { /* Skip white spaces */
            }
          // fall through
          case 49: break;
          case 3:
            { return Operator.neq(yyline + 1, yycolumn + 1);
            }
          // fall through
          case 50: break;
          case 4:
            { return Operator.and(yyline + 1, yycolumn + 1);
            }
          // fall through
          case 51: break;
          case 5:
            { return Symbol.lpar(yyline + 1, yycolumn + 1);
            }
          // fall through
          case 52: break;
          case 6:
            { return Symbol.rpar(yyline + 1, yycolumn + 1);
            }
          // fall through
          case 53: break;
          case 7:
            { return Operator.mult(yyline + 1, yycolumn + 1);
            }
          // fall through
          case 54: break;
          case 8:
            { return Operator.plus(yyline + 1, yycolumn + 1);
            }
          // fall through
          case 55: break;
          case 9:
            { return Symbol.comma(yyline + 1, yycolumn + 1);
            }
          // fall through
          case 56: break;
          case 10:
            { return Operator.minus(yyline + 1, yycolumn + 1);
            }
          // fall through
          case 57: break;
          case 11:
            { return Symbol.dot(yyline + 1, yycolumn + 1);
            }
          // fall through
          case 58: break;
          case 12:
            { /* Parse number */

                        // Stage 1: Validate number, check whether every character is digit
                        if (!yytext().matches("[0-9]+")) {
                            throw new LexicalException("Invalid number");
                        }

                        // Stage 2: Check number length
                        if (yytext().length() > 24) {
                            throw new LexicalException("Number too long");
                        }

                        // Stage 3: Parse number value
                        if (yytext().startsWith("0")) {
                            // Parse as octal number
                            try {
                                return new Number(yyline, yycolumn, Integer.parseInt(yytext(), 8));
                            } catch (NumberFormatException e) {
                                throw new LexicalException("Invalid number");
                            }
                        } else {
                            // Parse as decimal number
                            try {
                                return new Number(yyline, yycolumn, Integer.parseInt(yytext()));
                            } catch (NumberFormatException e) {
                                throw new LexicalException("Invalid number");
                            }
                        }
            }
          // fall through
          case 59: break;
          case 13:
            { return Symbol.colon(yyline + 1, yycolumn + 1);
            }
          // fall through
          case 60: break;
          case 14:
            { return Symbol.semicol(yyline + 1, yycolumn + 1);
            }
          // fall through
          case 61: break;
          case 15:
            { return Operator.lt(yyline + 1, yycolumn + 1);
            }
          // fall through
          case 62: break;
          case 16:
            { return Operator.eq(yyline + 1, yycolumn + 1);
            }
          // fall through
          case 63: break;
          case 17:
            { return Operator.gt(yyline + 1, yycolumn + 1);
            }
          // fall through
          case 64: break;
          case 18:
            { return new Identifier(yyline, yycolumn, yytext());
            }
          // fall through
          case 65: break;
          case 19:
            { return Symbol.lbrack(yyline + 1, yycolumn + 1);
            }
          // fall through
          case 66: break;
          case 20:
            { return Symbol.rbrack(yyline + 1, yycolumn + 1);
            }
          // fall through
          case 67: break;
          case 21:
            { return Operator.not(yyline + 1, yycolumn + 1);
            }
          // fall through
          case 68: break;
          case 22:
            { /* Open comment error */
                        throw new LexicalException("Open comment error");
            }
          // fall through
          case 69: break;
          case 23:
            { return Operator.assign(yyline + 1, yycolumn + 1);
            }
          // fall through
          case 70: break;
          case 24:
            { return Operator.lteq(yyline + 1, yycolumn + 1);
            }
          // fall through
          case 71: break;
          case 25:
            { return Operator.gteq(yyline + 1, yycolumn + 1);
            }
          // fall through
          case 72: break;
          case 26:
            { return Keyword.symDo(yyline + 1, yycolumn + 1);
            }
          // fall through
          case 73: break;
          case 27:
            { return Keyword.symIf(yyline + 1, yycolumn + 1);
            }
          // fall through
          case 74: break;
          case 28:
            { return Keyword.symOf(yyline + 1, yycolumn + 1);
            }
          // fall through
          case 75: break;
          case 29:
            { return Operator.or(yyline + 1, yycolumn + 1);
            }
          // fall through
          case 76: break;
          case 30:
            { return Operator.div(yyline + 1, yycolumn + 1);
            }
          // fall through
          case 77: break;
          case 31:
            { return Keyword.symEnd(yyline + 1, yycolumn + 1);
            }
          // fall through
          case 78: break;
          case 32:
            { return Operator.mod(yyline + 1, yycolumn + 1);
            }
          // fall through
          case 79: break;
          case 33:
            { return Keyword.symVar(yyline + 1, yycolumn + 1);
            }
          // fall through
          case 80: break;
          case 34:
            { /* Skip comments */
            }
          // fall through
          case 81: break;
          case 35:
            { return Keyword.symElse(yyline + 1, yycolumn + 1);
            }
          // fall through
          case 82: break;
          case 36:
            { return Keyword.symThen(yyline + 1, yycolumn + 1);
            }
          // fall through
          case 83: break;
          case 37:
            { return Keyword.symType(yyline + 1, yycolumn + 1);
            }
          // fall through
          case 84: break;
          case 38:
            { return Keyword.typeArray(yyline + 1, yycolumn + 1);
            }
          // fall through
          case 85: break;
          case 39:
            { return Keyword.symBegin(yyline + 1, yycolumn + 1);
            }
          // fall through
          case 86: break;
          case 40:
            { return Keyword.symConst(yyline + 1, yycolumn + 1);
            }
          // fall through
          case 87: break;
          case 41:
            { return Keyword.symElif(yyline + 1, yycolumn + 1);
            }
          // fall through
          case 88: break;
          case 42:
            { return Keyword.symWhile(yyline + 1, yycolumn + 1);
            }
          // fall through
          case 89: break;
          case 43:
            { return Keyword.symModule(yyline + 1, yycolumn + 1);
            }
          // fall through
          case 90: break;
          case 44:
            { return Keyword.typeRecord(yyline + 1, yycolumn + 1);
            }
          // fall through
          case 91: break;
          case 45:
            { return Keyword.typeBool(yyline + 1, yycolumn + 1);
            }
          // fall through
          case 92: break;
          case 46:
            { return Keyword.typeInt(yyline + 1, yycolumn + 1);
            }
          // fall through
          case 93: break;
          case 47:
            { return Keyword.symProcedure(yyline + 1, yycolumn + 1);
            }
          // fall through
          case 94: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
