// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: ex3/src/oberon.flex

import java_cup.runtime.*;
import java.io.*;
import exceptions.*;



@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1100\1\u1d00"+
    "\1\u1e00\1\u1f00\12\u2000\1\u2100\1\u2200\1\u2300\1\u2000\1\u2400"+
    "\1\u2500\2\u2000\31\u1100\1\u2600\121\u1100\1\u2700\4\u1100\1\u2800"+
    "\1\u1100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\1\u2e00\53\u1100"+
    "\1\u2f00\41\u2000\1\u1100\1\u3000\1\u3100\1\u1100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00\1\u1100"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900\1\u4a00"+
    "\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u2000\1\u4f00\1\u5000\1\u5100"+
    "\1\u5200\3\u1100\1\u5300\1\u5400\1\u5500\12\u2000\4\u1100\1\u5600"+
    "\17\u2000\2\u1100\1\u5700\41\u2000\2\u1100\1\u5800\1\u5900\2\u2000"+
    "\1\u5a00\1\u5b00\27\u1100\1\u5c00\4\u1100\1\u5d00\1\u5e00\42\u2000"+
    "\1\u1100\1\u5f00\1\u6000\11\u2000\1\u6100\24\u2000\1\u6200\1\u6300"+
    "\1\u2000\1\u6400\1\u6500\1\u6600\1\u6700\2\u2000\1\u6800\5\u2000"+
    "\1\u6900\1\u6a00\1\u6b00\5\u2000\1\u6c00\1\u6d00\2\u2000\1\u6e00"+
    "\1\u2000\1\u6f00\14\u2000\1\u7000\4\u2000\246\u1100\1\u7100\20\u1100"+
    "\1\u7200\1\u7300\25\u1100\1\u7400\34\u1100\1\u7500\14\u2000\2\u1100"+
    "\1\u7600\5\u2000\23\u1100\1\u7700\u0aec\u2000\1\u7800\1\u7900\u02fe\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\1\1\1\2\1\3\1\4\1\2\1\5\16\0"+
    "\4\4\1\2\2\4\1\6\1\7\1\4\1\10\1\4"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\4"+
    "\1\20\7\21\2\22\1\23\1\24\1\25\1\26\1\27"+
    "\2\4\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\2\7\1\41\1\42\1\43\1\44\1\45"+
    "\1\7\1\46\1\47\1\50\1\51\1\52\1\53\1\7"+
    "\1\54\1\7\1\55\1\4\1\56\1\4\1\7\1\4"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\2\7\1\41\1\42\1\43\1\44\1\45\1\7"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\7\1\54"+
    "\1\7\1\4\1\57\1\4\1\60\41\0\2\4\4\7"+
    "\4\4\1\7\2\4\1\0\7\4\1\7\4\4\1\7"+
    "\5\4\27\7\1\4\37\7\1\4\70\7\2\40\115\7"+
    "\1\47\u0142\7\4\4\14\7\16\4\5\7\7\4\1\7"+
    "\1\4\1\7\21\4\160\0\5\7\1\4\2\7\2\4"+
    "\4\7\1\4\1\7\6\4\1\7\1\4\3\7\1\4"+
    "\1\7\1\4\24\7\1\4\123\7\1\4\213\7\1\4"+
    "\5\0\2\4\246\7\1\4\46\7\2\4\1\7\6\4"+
    "\51\7\6\4\1\7\1\4\55\0\1\4\1\0\1\4"+
    "\2\0\1\4\2\0\1\4\1\0\10\4\33\7\4\4"+
    "\4\7\15\4\6\0\5\4\1\7\4\4\13\0\1\4"+
    "\1\0\3\4\53\7\37\0\4\4\2\7\1\0\143\7"+
    "\1\4\1\7\10\0\1\4\6\0\2\7\2\0\1\4"+
    "\4\0\2\7\12\0\3\7\2\4\1\7\17\4\1\0"+
    "\1\7\1\0\36\7\33\0\2\4\131\7\13\0\1\7"+
    "\16\4\12\0\41\7\11\0\2\7\4\4\1\7\2\4"+
    "\1\0\30\7\4\0\1\7\11\0\1\7\3\0\1\7"+
    "\5\0\22\4\31\7\3\0\4\4\13\7\65\4\25\7"+
    "\1\4\22\7\13\4\61\0\66\7\3\0\1\7\22\0"+
    "\1\7\7\0\12\7\2\0\2\4\12\0\1\4\20\7"+
    "\3\0\1\4\10\7\2\4\2\7\2\4\26\7\1\4"+
    "\7\7\1\4\1\7\3\4\4\7\2\4\1\0\1\7"+
    "\7\0\2\4\2\0\2\4\3\0\1\7\10\4\1\0"+
    "\4\4\2\7\1\4\3\7\2\0\2\4\12\0\4\7"+
    "\7\4\2\7\1\4\1\0\2\4\3\0\1\4\6\7"+
    "\4\4\2\7\2\4\26\7\1\4\7\7\1\4\2\7"+
    "\1\4\2\7\1\4\2\7\2\4\1\0\1\4\5\0"+
    "\4\4\2\0\2\4\3\0\3\4\1\0\7\4\4\7"+
    "\1\4\1\7\7\4\14\0\3\7\1\0\13\4\3\0"+
    "\1\4\11\7\1\4\3\7\1\4\26\7\1\4\7\7"+
    "\1\4\2\7\1\4\5\7\2\4\1\0\1\7\10\0"+
    "\1\4\3\0\1\4\3\0\2\4\1\7\17\4\2\7"+
    "\2\0\2\4\12\0\1\4\1\7\7\4\1\7\6\0"+
    "\1\4\3\0\1\4\10\7\2\4\2\7\2\4\26\7"+
    "\1\4\7\7\1\4\2\7\1\4\5\7\2\4\1\0"+
    "\1\7\7\0\2\4\2\0\2\4\3\0\7\4\3\0"+
    "\4\4\2\7\1\4\3\7\2\0\2\4\12\0\1\4"+
    "\1\7\20\4\1\0\1\7\1\4\6\7\3\4\3\7"+
    "\1\4\4\7\3\4\2\7\1\4\1\7\1\4\2\7"+
    "\3\4\2\7\3\4\3\7\3\4\14\7\4\4\5\0"+
    "\3\4\3\0\1\4\4\0\2\4\1\7\6\4\1\0"+
    "\16\4\12\0\11\4\1\7\6\4\5\0\10\7\1\4"+
    "\3\7\1\4\27\7\1\4\20\7\3\4\1\7\7\0"+
    "\1\4\3\0\1\4\4\0\7\4\2\0\1\4\3\7"+
    "\5\4\2\7\2\0\2\4\12\0\20\4\1\7\3\0"+
    "\1\4\10\7\1\4\3\7\1\4\27\7\1\4\12\7"+
    "\1\4\5\7\2\4\1\0\1\7\7\0\1\4\3\0"+
    "\1\4\4\0\7\4\2\0\7\4\1\7\1\4\2\7"+
    "\2\0\2\4\12\0\1\4\2\7\15\4\4\0\11\7"+
    "\1\4\3\7\1\4\51\7\2\0\1\7\7\0\1\4"+
    "\3\0\1\4\4\0\1\7\5\4\3\7\1\0\7\4"+
    "\3\7\2\0\2\4\12\0\12\4\6\7\1\4\3\0"+
    "\1\4\22\7\3\4\30\7\1\4\11\7\1\4\1\7"+
    "\2\4\7\7\3\4\1\0\4\4\6\0\1\4\1\0"+
    "\1\4\10\0\6\4\12\0\2\4\2\0\15\4\60\7"+
    "\1\0\2\7\7\0\4\4\10\7\10\0\1\4\12\0"+
    "\47\4\2\7\1\4\1\7\1\4\5\7\1\4\30\7"+
    "\1\4\1\7\1\4\12\7\1\0\2\7\11\0\1\7"+
    "\2\4\5\7\1\4\1\7\1\4\6\0\2\4\12\0"+
    "\2\4\4\7\40\4\1\7\27\4\2\0\6\4\12\0"+
    "\13\4\1\0\1\4\1\0\1\4\1\0\4\4\2\0"+
    "\10\7\1\4\44\7\4\4\24\0\1\4\2\0\5\7"+
    "\13\0\1\4\44\0\11\4\1\0\71\4\53\7\24\0"+
    "\1\7\12\0\6\4\6\7\4\0\4\7\3\0\1\7"+
    "\3\0\2\7\7\0\3\7\4\0\15\7\14\0\1\7"+
    "\17\0\2\4\46\7\1\4\1\7\5\4\1\7\2\4"+
    "\53\7\1\4\u014d\7\1\4\4\7\2\4\7\7\1\4"+
    "\1\7\1\4\4\7\2\4\51\7\1\4\4\7\2\4"+
    "\41\7\1\4\4\7\2\4\7\7\1\4\1\7\1\4"+
    "\4\7\2\4\17\7\1\4\71\7\1\4\4\7\2\4"+
    "\103\7\2\4\3\0\40\4\20\7\20\4\126\7\2\4"+
    "\6\7\3\4\u016c\7\2\4\21\7\1\4\32\7\5\4"+
    "\113\7\3\4\13\7\7\4\15\7\1\4\4\7\3\0"+
    "\13\4\22\7\3\0\13\4\22\7\2\0\14\4\15\7"+
    "\1\4\3\7\1\4\2\0\14\4\64\7\40\0\3\4"+
    "\1\7\3\4\2\7\1\0\2\4\12\0\41\4\4\0"+
    "\1\4\12\0\6\4\131\7\7\4\5\7\2\0\42\7"+
    "\1\0\1\7\5\4\106\7\12\4\37\7\1\4\14\0"+
    "\4\4\14\0\12\4\12\0\36\7\2\4\5\7\13\4"+
    "\54\7\4\4\32\7\6\4\12\0\46\4\27\7\5\0"+
    "\4\4\65\7\12\0\1\4\35\0\2\4\13\0\6\4"+
    "\12\0\15\4\1\7\10\4\16\0\1\4\2\0\77\4"+
    "\5\0\57\7\21\0\7\7\4\4\12\0\21\4\11\0"+
    "\14\4\3\0\36\7\15\0\2\7\12\0\54\7\16\0"+
    "\14\4\44\7\24\0\10\4\12\0\3\4\3\7\12\0"+
    "\44\7\2\4\11\7\7\4\53\7\2\4\3\7\20\4"+
    "\3\0\1\4\25\0\4\7\1\0\6\7\1\0\2\7"+
    "\3\0\1\7\5\4\300\7\72\0\1\4\5\0\26\7"+
    "\2\4\6\7\2\4\46\7\2\4\6\7\2\4\10\7"+
    "\1\4\1\7\1\4\1\7\1\4\1\7\1\4\37\7"+
    "\2\4\65\7\1\4\7\7\1\4\1\7\3\4\3\7"+
    "\1\4\7\7\3\4\4\7\2\4\6\7\4\4\15\7"+
    "\5\4\3\7\1\4\7\7\16\4\5\0\32\4\5\0"+
    "\20\4\2\7\23\4\1\7\13\4\5\0\1\4\12\0"+
    "\1\4\1\7\15\4\1\7\20\4\15\7\3\4\40\7"+
    "\20\4\15\0\4\4\1\0\3\4\14\0\21\4\1\7"+
    "\4\4\1\7\2\4\12\7\1\4\1\7\3\4\5\7"+
    "\6\4\1\7\1\4\1\7\1\4\1\7\1\4\4\7"+
    "\1\4\13\7\2\4\4\7\5\4\5\7\4\4\1\7"+
    "\21\4\51\7\u0177\4\57\7\1\4\57\7\1\4\205\7"+
    "\6\4\4\7\3\0\2\7\14\4\46\7\1\4\1\7"+
    "\5\4\1\7\2\4\70\7\7\4\1\7\17\4\1\0"+
    "\27\7\11\4\7\7\1\4\7\7\1\4\7\7\1\4"+
    "\7\7\1\4\7\7\1\4\7\7\1\4\7\7\1\4"+
    "\7\7\1\4\40\0\57\4\1\7\325\4\3\7\31\4"+
    "\11\7\6\0\1\4\5\7\2\4\5\7\4\4\126\7"+
    "\2\4\2\0\2\4\3\7\1\4\132\7\1\4\4\7"+
    "\5\4\53\7\1\4\136\7\21\4\40\7\60\4\320\7"+
    "\100\4\375\7\3\4\215\7\103\4\56\7\2\4\15\7"+
    "\3\4\20\7\12\0\2\7\24\4\57\7\1\0\4\4"+
    "\12\0\1\4\37\7\2\0\120\7\2\0\45\4\11\7"+
    "\2\4\147\7\2\4\65\7\2\4\11\7\52\4\15\7"+
    "\1\0\3\7\1\0\4\7\1\0\27\7\5\0\4\4"+
    "\1\0\13\4\1\7\7\4\64\7\14\4\2\0\62\7"+
    "\22\0\12\4\12\0\6\4\22\0\6\7\3\4\1\7"+
    "\1\4\2\7\13\0\34\7\10\0\2\4\27\7\15\0"+
    "\14\4\35\7\3\4\4\0\57\7\16\0\16\4\1\7"+
    "\12\0\6\4\5\7\1\0\12\7\12\0\5\7\1\4"+
    "\51\7\16\0\11\4\3\7\1\0\10\7\2\0\2\4"+
    "\12\0\6\4\27\7\3\4\1\7\3\0\62\7\1\0"+
    "\1\7\3\0\2\7\2\0\5\7\2\0\1\7\1\0"+
    "\1\7\30\4\3\7\2\4\13\7\5\0\2\4\3\7"+
    "\2\0\12\4\6\7\2\4\6\7\2\4\6\7\11\4"+
    "\7\7\1\4\7\7\1\4\53\7\1\4\16\7\6\4"+
    "\163\7\10\0\1\4\2\0\2\4\12\0\6\4\244\7"+
    "\14\4\27\7\4\4\61\7\4\4\156\7\2\4\152\7"+
    "\46\4\7\7\14\4\5\7\5\4\1\7\1\0\12\7"+
    "\1\4\15\7\1\4\5\7\1\4\1\7\1\4\2\7"+
    "\1\4\2\7\1\4\154\7\41\4\153\7\22\4\100\7"+
    "\2\4\66\7\50\4\15\7\3\4\20\0\20\4\20\0"+
    "\3\4\2\7\30\4\3\7\31\4\1\7\6\4\5\7"+
    "\1\4\207\7\2\4\1\0\4\4\1\7\13\4\12\0"+
    "\7\4\32\7\4\4\1\7\1\4\32\7\13\4\131\7"+
    "\3\4\6\7\2\4\6\7\2\4\6\7\2\4\3\7"+
    "\3\4\2\7\3\4\2\7\22\4\3\0\4\4\14\7"+
    "\1\4\32\7\1\4\23\7\1\4\2\7\1\4\17\7"+
    "\2\4\16\7\42\4\173\7\105\4\65\7\210\4\1\0"+
    "\202\4\35\7\3\4\61\7\17\4\1\0\37\4\40\7"+
    "\15\4\36\7\5\4\46\7\5\0\5\4\36\7\2\4"+
    "\44\7\4\4\10\7\1\4\5\7\52\4\236\7\2\4"+
    "\12\0\6\4\44\7\4\4\44\7\4\4\50\7\10\4"+
    "\64\7\234\4\67\7\11\4\26\7\12\4\10\7\230\4"+
    "\6\7\2\4\1\7\1\4\54\7\1\4\2\7\3\4"+
    "\1\7\2\4\27\7\12\4\27\7\11\4\37\7\101\4"+
    "\23\7\1\4\2\7\12\4\26\7\12\4\32\7\106\4"+
    "\70\7\6\4\2\7\100\4\1\7\3\0\1\4\2\0"+
    "\5\4\4\0\4\7\1\4\3\7\1\4\35\7\2\4"+
    "\3\0\4\4\1\0\40\4\35\7\3\4\35\7\43\4"+
    "\10\7\1\4\34\7\2\0\31\4\66\7\12\4\26\7"+
    "\12\4\23\7\15\4\22\7\156\4\111\7\67\4\63\7"+
    "\15\4\63\7\15\4\44\7\4\0\10\4\12\0\u0146\4"+
    "\52\7\1\4\2\0\3\4\2\7\116\4\35\7\12\4"+
    "\1\7\10\4\26\7\13\0\137\4\25\7\33\4\27\7"+
    "\11\4\3\0\65\7\17\0\37\4\12\0\17\4\4\0"+
    "\55\7\13\0\2\4\1\0\17\4\1\0\2\4\31\7"+
    "\7\4\12\0\6\4\3\0\44\7\16\0\1\4\12\0"+
    "\4\4\1\7\2\0\1\7\10\4\43\7\1\0\2\4"+
    "\1\7\11\4\3\0\60\7\16\0\4\7\4\4\4\0"+
    "\1\4\14\0\1\7\1\4\1\7\43\4\22\7\1\4"+
    "\31\7\14\0\6\4\1\0\101\4\7\7\1\4\1\7"+
    "\1\4\4\7\1\4\17\7\1\4\12\7\7\4\57\7"+
    "\14\0\5\4\12\0\6\4\4\0\1\4\10\7\2\4"+
    "\2\7\2\4\26\7\1\4\7\7\1\4\2\7\1\4"+
    "\5\7\1\4\2\0\1\7\7\0\2\4\2\0\2\4"+
    "\3\0\2\4\1\7\6\4\1\0\5\4\5\7\2\0"+
    "\2\4\7\0\3\4\5\0\213\4\65\7\22\0\4\7"+
    "\5\4\12\0\4\4\1\0\3\7\36\4\60\7\24\0"+
    "\2\7\1\4\1\7\10\4\12\0\246\4\57\7\7\0"+
    "\2\4\11\0\27\4\4\7\2\0\42\4\60\7\21\0"+
    "\3\4\1\7\13\4\12\0\46\4\53\7\15\0\1\7"+
    "\7\4\12\0\66\4\33\7\2\4\17\0\4\4\12\0"+
    "\306\4\54\7\17\0\145\4\100\7\12\0\25\4\10\7"+
    "\2\4\1\7\2\4\10\7\1\4\2\7\1\4\30\7"+
    "\6\0\1\4\2\0\2\4\4\0\1\7\1\0\1\7"+
    "\2\0\14\4\12\0\106\4\10\7\2\4\47\7\7\0"+
    "\2\4\7\0\1\7\1\4\1\7\1\0\33\4\1\7"+
    "\12\0\50\7\7\0\1\7\4\0\10\4\1\0\10\4"+
    "\1\7\13\0\56\7\20\0\3\4\1\7\42\4\71\7"+
    "\7\4\11\7\1\4\45\7\10\0\1\4\10\0\1\7"+
    "\17\4\12\0\30\4\36\7\2\4\26\0\1\4\16\0"+
    "\111\4\7\7\1\4\2\7\1\4\46\7\6\0\3\4"+
    "\1\0\1\4\2\0\1\4\7\0\1\7\1\0\10\4"+
    "\12\0\6\4\6\7\1\4\2\7\1\4\40\7\5\0"+
    "\1\4\2\0\1\4\5\0\1\7\7\4\12\0\u0136\4"+
    "\23\7\4\0\271\4\1\7\54\4\4\7\37\4\232\7"+
    "\146\4\157\7\21\4\304\7\274\4\57\7\1\4\11\0"+
    "\307\4\107\7\271\4\71\7\7\4\37\7\1\4\12\0"+
    "\146\4\36\7\2\4\5\0\13\4\60\7\7\0\11\4"+
    "\4\7\14\4\12\0\11\4\25\7\5\4\23\7\260\4"+
    "\100\7\200\4\113\7\4\4\1\0\1\7\67\0\7\4"+
    "\4\0\15\7\100\4\2\7\1\4\1\7\1\0\13\4"+
    "\2\0\16\4\370\7\10\4\326\7\52\4\11\7\367\4"+
    "\37\7\61\4\3\7\21\4\4\7\10\4\u018c\7\4\4"+
    "\153\7\5\4\15\7\3\4\11\7\7\4\12\7\3\4"+
    "\2\0\1\4\4\0\301\4\5\0\3\4\26\0\2\4"+
    "\7\0\36\4\4\0\224\4\3\0\273\4\125\7\1\4"+
    "\107\7\1\4\2\7\2\4\1\7\2\4\2\7\2\4"+
    "\4\7\1\4\14\7\1\4\1\7\1\4\7\7\1\4"+
    "\101\7\1\4\4\7\2\4\10\7\1\4\7\7\1\4"+
    "\34\7\1\4\4\7\1\4\5\7\1\4\1\7\3\4"+
    "\7\7\1\4\u0154\7\2\4\31\7\1\4\31\7\1\4"+
    "\37\7\1\4\31\7\1\4\37\7\1\4\31\7\1\4"+
    "\37\7\1\4\31\7\1\4\37\7\1\4\31\7\1\4"+
    "\10\7\2\4\151\0\4\4\62\0\10\4\1\0\16\4"+
    "\1\0\26\4\5\0\1\4\17\0\120\4\7\0\1\4"+
    "\21\0\2\4\7\0\1\4\2\0\1\4\5\0\325\4"+
    "\55\7\3\4\7\0\7\7\2\4\12\0\4\4\1\7"+
    "\u0171\4\54\7\16\0\5\4\306\7\13\4\7\0\51\4"+
    "\104\7\7\0\1\7\4\4\12\0\u0156\4\1\7\117\4"+
    "\4\7\1\4\33\7\1\4\2\7\1\4\1\7\2\4"+
    "\1\7\1\4\12\7\1\4\4\7\1\4\1\7\1\4"+
    "\1\7\6\4\1\7\4\4\1\7\1\4\1\7\1\4"+
    "\1\7\1\4\3\7\1\4\2\7\1\4\1\7\2\4"+
    "\1\7\1\4\1\7\1\4\1\7\1\4\1\7\1\4"+
    "\1\7\1\4\2\7\1\4\1\7\2\4\4\7\1\4"+
    "\7\7\1\4\4\7\1\4\4\7\1\4\1\7\1\4"+
    "\12\7\1\4\21\7\5\4\3\7\1\4\5\7\1\4"+
    "\21\7\u0134\4\12\0\6\4\336\7\42\4\65\7\13\4"+
    "\336\7\2\4\u0182\7\16\4\u0131\7\37\4\36\7\342\4"+
    "\113\7\266\4\1\0\36\4\140\0\200\4\360\0\20\4";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[31232];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\2\15\1\16\1\17"+
    "\1\20\1\21\1\22\15\4\1\23\1\24\1\25\5\0"+
    "\1\26\2\27\1\30\1\31\1\32\5\4\1\33\2\4"+
    "\1\34\2\4\1\35\1\36\7\4\2\37\1\0\2\27"+
    "\4\4\1\40\1\4\1\41\1\4\1\42\5\4\1\43"+
    "\2\4\1\44\1\37\4\4\1\45\4\4\1\46\1\4"+
    "\1\47\1\50\2\4\1\44\1\51\1\52\1\4\1\53"+
    "\1\54\4\4\1\55\1\56\1\37\1\0\2\4\1\57"+
    "\1\4\1\60\1\4\1\37\1\61\1\62\1\4\1\63"+
    "\1\4\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\61\0\142\0\61\0\223\0\61\0\304"+
    "\0\61\0\61\0\61\0\61\0\61\0\61\0\365\0\u0126"+
    "\0\u0157\0\61\0\u0188\0\61\0\u01b9\0\u01ea\0\u021b\0\u024c"+
    "\0\u027d\0\u02ae\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4"+
    "\0\u0405\0\u0436\0\61\0\61\0\61\0\61\0\u0467\0\u0498"+
    "\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d\0\61\0\61\0\61"+
    "\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0682\0\223\0\u06b3\0\u06e4"+
    "\0\223\0\u0715\0\u0746\0\223\0\223\0\u0777\0\u07a8\0\u07d9"+
    "\0\u080a\0\u083b\0\u086c\0\u089d\0\61\0\u04fa\0\u08ce\0\u08ff"+
    "\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4\0\223\0\u0a25\0\223"+
    "\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\223"+
    "\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04"+
    "\0\223\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\223\0\u0df9\0\223"+
    "\0\223\0\u0e2a\0\u0e5b\0\u0e8c\0\223\0\223\0\u0ebd\0\223"+
    "\0\223\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\223\0\u0fb2\0\u0e8c"+
    "\0\u0fe3\0\u1014\0\u1045\0\223\0\u1076\0\223\0\u10a7\0\u10d8"+
    "\0\223\0\223\0\u1109\0\223\0\u113a\0\223";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\2\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\3\6\1\33\1\6\1\34\1\6\1\35"+
    "\1\36\1\37\1\6\1\40\1\6\1\41\1\42\1\6"+
    "\1\43\1\44\1\2\1\45\11\46\1\47\1\46\1\50"+
    "\50\46\1\3\5\46\1\47\1\46\1\50\45\46\2\6"+
    "\5\46\1\6\1\46\1\47\1\46\1\50\4\46\3\6"+
    "\5\46\25\6\15\46\1\51\1\46\1\52\54\46\1\53"+
    "\1\46\1\47\1\46\1\50\4\46\2\17\1\54\5\46"+
    "\25\53\2\46\1\55\10\46\1\53\1\46\1\47\1\46"+
    "\1\50\4\46\3\20\5\46\25\53\15\46\1\47\1\46"+
    "\1\50\12\46\1\56\43\46\1\47\1\46\1\50\12\46"+
    "\1\57\43\46\1\47\1\46\1\50\12\46\1\60\32\46"+
    "\2\6\5\46\1\6\1\46\1\47\1\46\1\50\4\46"+
    "\3\6\5\46\16\6\1\61\6\6\4\46\2\6\5\46"+
    "\1\6\1\46\1\47\1\46\1\50\4\46\3\6\5\46"+
    "\4\6\1\62\7\6\1\63\10\6\4\46\2\6\5\46"+
    "\1\6\1\46\1\47\1\46\1\50\4\46\3\6\5\46"+
    "\14\6\1\64\10\6\4\46\2\6\5\46\1\6\1\46"+
    "\1\47\1\46\1\50\4\46\3\6\5\46\10\6\1\65"+
    "\3\6\1\66\10\6\4\46\2\6\5\46\1\6\1\46"+
    "\1\47\1\46\1\50\4\46\3\6\5\46\11\6\1\67"+
    "\1\6\1\70\11\6\4\46\2\6\5\46\1\6\1\46"+
    "\1\47\1\46\1\50\4\46\3\6\5\46\5\6\1\71"+
    "\5\6\1\72\11\6\4\46\2\6\5\46\1\6\1\46"+
    "\1\47\1\46\1\50\4\46\3\6\5\46\14\6\1\73"+
    "\10\6\4\46\2\6\5\46\1\6\1\46\1\47\1\46"+
    "\1\50\4\46\3\6\5\46\5\6\1\74\10\6\1\75"+
    "\6\6\4\46\2\6\5\46\1\6\1\46\1\47\1\46"+
    "\1\50\4\46\3\6\5\46\16\6\1\76\6\6\4\46"+
    "\2\6\5\46\1\6\1\46\1\47\1\46\1\50\4\46"+
    "\3\6\5\46\4\6\1\77\20\6\4\46\2\6\5\46"+
    "\1\6\1\46\1\47\1\46\1\50\4\46\3\6\5\46"+
    "\7\6\1\100\14\6\1\101\4\46\2\6\5\46\1\6"+
    "\1\46\1\47\1\46\1\50\4\46\3\6\5\46\1\102"+
    "\24\6\4\46\2\6\5\46\1\6\1\46\1\47\1\46"+
    "\1\50\4\46\3\6\5\46\7\6\1\103\6\6\1\104"+
    "\6\6\15\46\1\51\1\46\1\0\56\46\1\47\1\105"+
    "\1\50\56\46\1\51\1\46\1\50\45\46\13\106\1\107"+
    "\45\106\2\53\5\46\1\53\1\46\1\47\1\46\1\50"+
    "\4\46\3\53\5\46\25\53\13\46\1\53\1\46\1\47"+
    "\1\46\1\50\4\46\2\110\1\54\5\46\25\53\2\46"+
    "\1\55\12\46\1\47\1\46\1\50\4\46\2\111\1\55"+
    "\34\46\1\55\1\46\2\6\5\46\1\6\1\46\1\47"+
    "\1\46\1\50\4\46\3\6\5\46\16\6\1\112\6\6"+
    "\4\46\2\6\5\46\1\6\1\46\1\47\1\46\1\50"+
    "\4\46\3\6\5\46\6\6\1\113\16\6\4\46\2\6"+
    "\5\46\1\6\1\46\1\47\1\46\1\50\4\46\3\6"+
    "\5\46\14\6\1\114\10\6\4\46\2\6\5\46\1\6"+
    "\1\46\1\47\1\46\1\50\4\46\3\6\5\46\13\6"+
    "\1\115\11\6\4\46\2\6\5\46\1\6\1\46\1\47"+
    "\1\46\1\50\4\46\3\6\5\46\22\6\1\116\2\6"+
    "\4\46\2\6\5\46\1\6\1\46\1\47\1\46\1\50"+
    "\4\46\3\6\5\46\17\6\1\117\5\6\4\46\2\6"+
    "\5\46\1\6\1\46\1\47\1\46\1\50\4\46\3\6"+
    "\5\46\3\6\1\120\21\6\4\46\2\6\5\46\1\6"+
    "\1\46\1\47\1\46\1\50\4\46\3\6\5\46\20\6"+
    "\1\121\4\6\4\46\2\6\5\46\1\6\1\46\1\47"+
    "\1\46\1\50\4\46\3\6\5\46\3\6\1\122\21\6"+
    "\4\46\2\6\5\46\1\6\1\46\1\47\1\46\1\50"+
    "\4\46\3\6\5\46\14\6\1\123\10\6\4\46\2\6"+
    "\5\46\1\6\1\46\1\47\1\46\1\50\4\46\3\6"+
    "\5\46\1\124\1\6\1\125\22\6\4\46\2\6\5\46"+
    "\1\6\1\46\1\47\1\46\1\50\4\46\3\6\5\46"+
    "\4\6\1\126\20\6\4\46\2\6\5\46\1\6\1\46"+
    "\1\47\1\46\1\50\4\46\3\6\5\46\15\6\1\127"+
    "\7\6\4\46\2\6\5\46\1\6\1\46\1\47\1\46"+
    "\1\50\4\46\3\6\5\46\16\6\1\130\6\6\4\46"+
    "\2\6\5\46\1\6\1\46\1\47\1\46\1\50\4\46"+
    "\3\6\5\46\10\6\1\131\14\6\4\46\2\6\5\46"+
    "\1\6\1\46\1\47\1\46\1\50\4\46\3\6\5\46"+
    "\10\6\1\132\14\6\4\46\12\106\1\133\1\134\45\106"+
    "\7\46\1\53\1\46\1\47\1\46\1\50\4\46\3\110"+
    "\5\46\25\53\15\46\1\47\1\46\1\50\4\46\3\111"+
    "\36\46\2\6\5\46\1\6\1\46\1\47\1\46\1\50"+
    "\4\46\3\6\5\46\1\135\24\6\4\46\2\6\5\46"+
    "\1\6\1\46\1\47\1\46\1\50\4\46\3\6\5\46"+
    "\10\6\1\136\14\6\4\46\2\6\5\46\1\6\1\46"+
    "\1\47\1\46\1\50\4\46\3\6\5\46\11\6\1\137"+
    "\13\6\4\46\2\6\5\46\1\6\1\46\1\47\1\46"+
    "\1\50\4\46\3\6\5\46\17\6\1\140\5\6\4\46"+
    "\2\6\5\46\1\6\1\46\1\47\1\46\1\50\4\46"+
    "\3\6\5\46\4\6\1\141\3\6\1\142\14\6\4\46"+
    "\2\6\5\46\1\6\1\46\1\47\1\46\1\50\4\46"+
    "\3\6\5\46\4\6\1\143\20\6\4\46\2\6\5\46"+
    "\1\6\1\46\1\47\1\46\1\50\4\46\3\6\5\46"+
    "\21\6\1\144\3\6\4\46\2\6\5\46\1\6\1\46"+
    "\1\47\1\46\1\50\4\46\3\6\5\46\2\6\1\145"+
    "\22\6\4\46\2\6\5\46\1\6\1\46\1\47\1\46"+
    "\1\50\4\46\3\6\5\46\3\6\1\146\21\6\4\46"+
    "\2\6\5\46\1\6\1\46\1\47\1\46\1\50\4\46"+
    "\3\6\5\46\14\6\1\147\10\6\4\46\2\6\5\46"+
    "\1\6\1\46\1\47\1\46\1\50\4\46\3\6\5\46"+
    "\13\6\1\150\11\6\4\46\2\6\5\46\1\6\1\46"+
    "\1\47\1\46\1\50\4\46\3\6\5\46\4\6\1\151"+
    "\20\6\4\46\2\6\5\46\1\6\1\46\1\47\1\46"+
    "\1\50\4\46\3\6\5\46\11\6\1\152\13\6\4\46"+
    "\2\6\5\46\1\6\1\46\1\47\1\46\1\50\4\46"+
    "\3\6\5\46\20\6\1\153\4\6\4\46\61\0\12\106"+
    "\1\154\1\134\45\106\2\6\5\46\1\6\1\46\1\47"+
    "\1\46\1\50\4\46\3\6\5\46\24\6\1\155\4\46"+
    "\2\6\5\46\1\6\1\46\1\47\1\46\1\50\4\46"+
    "\3\6\5\46\13\6\1\156\11\6\4\46\2\6\5\46"+
    "\1\6\1\46\1\47\1\46\1\50\4\46\3\6\5\46"+
    "\4\6\1\157\20\6\4\46\2\6\5\46\1\6\1\46"+
    "\1\47\1\46\1\50\4\46\3\6\5\46\20\6\1\160"+
    "\4\6\4\46\2\6\5\46\1\6\1\46\1\47\1\46"+
    "\1\50\4\46\3\6\5\46\5\6\1\161\17\6\4\46"+
    "\2\6\5\46\1\6\1\46\1\47\1\46\1\50\4\46"+
    "\3\6\5\46\6\6\1\162\16\6\4\46\2\6\5\46"+
    "\1\6\1\46\1\47\1\46\1\50\4\46\3\6\5\46"+
    "\11\6\1\163\13\6\4\46\2\6\5\46\1\6\1\46"+
    "\1\47\1\46\1\50\4\46\3\6\5\46\4\6\1\164"+
    "\20\6\4\46\2\6\5\46\1\6\1\46\1\47\1\46"+
    "\1\50\4\46\3\6\5\46\16\6\1\165\6\6\4\46"+
    "\2\6\5\46\1\6\1\46\1\47\1\46\1\50\4\46"+
    "\3\6\5\46\4\6\1\166\20\6\4\46\2\6\5\46"+
    "\1\6\1\46\1\47\1\46\1\50\4\46\3\6\5\46"+
    "\4\6\1\167\20\6\4\46\13\170\1\171\45\170\2\6"+
    "\5\46\1\6\1\46\1\47\1\46\1\50\4\46\3\6"+
    "\5\46\1\172\24\6\4\46\2\6\5\46\1\6\1\46"+
    "\1\47\1\46\1\50\4\46\3\6\5\46\4\6\1\173"+
    "\20\6\4\46\2\6\5\46\1\6\1\46\1\47\1\46"+
    "\1\50\4\46\3\6\5\46\4\6\1\174\20\6\4\46"+
    "\2\6\5\46\1\6\1\46\1\47\1\46\1\50\4\46"+
    "\3\6\5\46\3\6\1\175\21\6\4\46\2\6\5\46"+
    "\1\6\1\46\1\47\1\46\1\50\4\46\3\6\5\46"+
    "\3\6\1\176\21\6\4\46\2\6\5\46\1\6\1\46"+
    "\1\47\1\46\1\50\4\46\3\6\5\46\11\6\1\177"+
    "\13\6\4\46\12\170\1\0\1\200\45\170\2\6\5\46"+
    "\1\6\1\46\1\47\1\46\1\50\4\46\3\6\5\46"+
    "\13\6\1\201\11\6\4\46\2\6\5\46\1\6\1\46"+
    "\1\47\1\46\1\50\4\46\3\6\5\46\16\6\1\202"+
    "\6\6\4\46\2\6\5\46\1\6\1\46\1\47\1\46"+
    "\1\50\4\46\3\6\5\46\21\6\1\203\3\6\4\46"+
    "\2\6\5\46\1\6\1\46\1\47\1\46\1\50\4\46"+
    "\3\6\5\46\13\6\1\204\11\6\4\46\13\170\1\200"+
    "\45\170\2\6\5\46\1\6\1\46\1\47\1\46\1\50"+
    "\4\46\3\6\5\46\16\6\1\205\6\6\4\46\2\6"+
    "\5\46\1\6\1\46\1\47\1\46\1\50\4\46\3\6"+
    "\5\46\4\6\1\206\20\6\4\46";

  private static int [] zzUnpacktrans() {
    int [] result = new int[4459];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\44\1\5\0\34\1\1\0\23\1\1\11\35\1"+
    "\1\0\15\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

int get_line(){	return yyline;}
int get_column(){	return yycolumn;}


private java_cup.runtime.Symbol ToCupSymbol(int type) 
{
	return new java_cup.runtime.Symbol(type);
}
private java_cup.runtime.Symbol ToCupSymbol(int type, Object value)
{
	return new java_cup.runtime.Symbol(type, value);
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
    , LexicalException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return ToCupSymbol(Symbol.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new IllegalSymbolException(yytext());
            }
          // fall through
          case 53: break;
          case 2:
            { /*skip it*/
            }
          // fall through
          case 54: break;
          case 3:
            { return ToCupSymbol(Symbol.NEQ);
            }
          // fall through
          case 55: break;
          case 4:
            { if (yylength() > 24)
				throw new IllegalIdentifierLengthException(yytext());
			return ToCupSymbol(Symbol.IDENTIFIER, yytext());
            }
          // fall through
          case 56: break;
          case 5:
            { return ToCupSymbol(Symbol.AND);
            }
          // fall through
          case 57: break;
          case 6:
            { return ToCupSymbol(Symbol.LPAREN);
            }
          // fall through
          case 58: break;
          case 7:
            { return ToCupSymbol(Symbol.RPAREN);
            }
          // fall through
          case 59: break;
          case 8:
            { return ToCupSymbol(Symbol.TIMES);
            }
          // fall through
          case 60: break;
          case 9:
            { return ToCupSymbol(Symbol.PLUS);
            }
          // fall through
          case 61: break;
          case 10:
            { return ToCupSymbol(Symbol.COMMA);
            }
          // fall through
          case 62: break;
          case 11:
            { return ToCupSymbol(Symbol.MINUS);
            }
          // fall through
          case 63: break;
          case 12:
            { return ToCupSymbol(Symbol.PERIOD);
            }
          // fall through
          case 64: break;
          case 13:
            { if (yylength() > 12)
				throw new IllegalIntegerRangeException(yytext());
			if (yytext().charAt(0) == '0' && yytext().length()>1)
				return ToCupSymbol(Symbol.NUMBER, yytext());
			return ToCupSymbol(Symbol.NUMBER, yytext());
            }
          // fall through
          case 65: break;
          case 14:
            { return ToCupSymbol(Symbol.COLON);
            }
          // fall through
          case 66: break;
          case 15:
            { return ToCupSymbol(Symbol.SEMI);
            }
          // fall through
          case 67: break;
          case 16:
            { return ToCupSymbol(Symbol.LT);
            }
          // fall through
          case 68: break;
          case 17:
            { return ToCupSymbol(Symbol.EQ);
            }
          // fall through
          case 69: break;
          case 18:
            { return ToCupSymbol(Symbol.GT);
            }
          // fall through
          case 70: break;
          case 19:
            { return ToCupSymbol(Symbol.LBRACKET);
            }
          // fall through
          case 71: break;
          case 20:
            { return ToCupSymbol(Symbol.RBRACKET);
            }
          // fall through
          case 72: break;
          case 21:
            { return ToCupSymbol(Symbol.NOT);
            }
          // fall through
          case 73: break;
          case 22:
            { throw new IllegalIntegerException(yytext());
            }
          // fall through
          case 74: break;
          case 23:
            { throw new IllegalOctalException(yytext());
            }
          // fall through
          case 75: break;
          case 24:
            { return ToCupSymbol(Symbol.ASSIGN);
            }
          // fall through
          case 76: break;
          case 25:
            { return ToCupSymbol(Symbol.LE);
            }
          // fall through
          case 77: break;
          case 26:
            { return ToCupSymbol(Symbol.GE);
            }
          // fall through
          case 78: break;
          case 27:
            { return ToCupSymbol(Symbol.DO);
            }
          // fall through
          case 79: break;
          case 28:
            { return ToCupSymbol(Symbol.IF);
            }
          // fall through
          case 80: break;
          case 29:
            { return ToCupSymbol(Symbol.OF);
            }
          // fall through
          case 81: break;
          case 30:
            { return ToCupSymbol(Symbol.OR);
            }
          // fall through
          case 82: break;
          case 31:
            { throw new MismatchedCommentException(yytext());
            }
          // fall through
          case 83: break;
          case 32:
            { return ToCupSymbol(Symbol.DIVIDE);
            }
          // fall through
          case 84: break;
          case 33:
            { return ToCupSymbol(Symbol.END);
            }
          // fall through
          case 85: break;
          case 34:
            { return ToCupSymbol(Symbol.MOD);
            }
          // fall through
          case 86: break;
          case 35:
            { return ToCupSymbol(Symbol.VAR);
            }
          // fall through
          case 87: break;
          case 36:
            { /*Do nothing*/
            }
          // fall through
          case 88: break;
          case 37:
            { return ToCupSymbol(Symbol.ELSE);
            }
          // fall through
          case 89: break;
          case 38:
            { return ToCupSymbol(Symbol.READ);
            }
          // fall through
          case 90: break;
          case 39:
            { return ToCupSymbol(Symbol.THEN);
            }
          // fall through
          case 91: break;
          case 40:
            { return ToCupSymbol(Symbol.TYPE);
            }
          // fall through
          case 92: break;
          case 41:
            { return ToCupSymbol(Symbol.ARRAY);
            }
          // fall through
          case 93: break;
          case 42:
            { return ToCupSymbol(Symbol.BEGIN);
            }
          // fall through
          case 94: break;
          case 43:
            { return ToCupSymbol(Symbol.CONST);
            }
          // fall through
          case 95: break;
          case 44:
            { return ToCupSymbol(Symbol.ELSIF);
            }
          // fall through
          case 96: break;
          case 45:
            { return ToCupSymbol(Symbol.WHILE);
            }
          // fall through
          case 97: break;
          case 46:
            { return ToCupSymbol(Symbol.WRITE);
            }
          // fall through
          case 98: break;
          case 47:
            { return ToCupSymbol(Symbol.MODULE);
            }
          // fall through
          case 99: break;
          case 48:
            { return ToCupSymbol(Symbol.RECORD);
            }
          // fall through
          case 100: break;
          case 49:
            { return ToCupSymbol(Symbol.BOOLEAN);
            }
          // fall through
          case 101: break;
          case 50:
            { return ToCupSymbol(Symbol.INTEGER);
            }
          // fall through
          case 102: break;
          case 51:
            { return ToCupSymbol(Symbol.WRITELN);
            }
          // fall through
          case 103: break;
          case 52:
            { return ToCupSymbol(Symbol.PROCEDURE);
            }
          // fall through
          case 104: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
