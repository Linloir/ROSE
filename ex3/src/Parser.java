
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import exceptions.*;
import java.util.*;
import callgraph.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbol.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\176\000\002\002\003\000\002\002\004\000\002\003" +
    "\012\000\002\004\004\000\002\004\002\000\002\005\006" +
    "\000\002\012\004\000\002\012\002\000\002\015\007\000" +
    "\002\015\002\000\002\013\004\000\002\013\002\000\002" +
    "\016\007\000\002\016\002\000\002\014\004\000\002\014" +
    "\002\000\002\017\007\000\002\017\002\000\002\040\003" +
    "\000\002\040\005\000\002\006\002\000\002\006\007\000" +
    "\002\010\005\000\002\011\006\000\002\007\004\000\002" +
    "\007\002\000\002\044\002\000\002\044\004\000\002\044" +
    "\005\000\002\047\010\000\002\047\006\000\002\034\003" +
    "\000\002\034\002\000\002\036\003\000\002\036\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\042\005\000\002\023\005\000\002\023" +
    "\003\000\002\022\002\000\002\022\005\000\002\041\004" +
    "\000\002\020\006\000\002\020\005\000\002\024\003\000" +
    "\002\024\005\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\002\000\002\021\006\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\006\000\002\021\003\000\002" +
    "\026\007\000\002\027\011\000\002\030\007\000\002\030" +
    "\002\000\002\031\002\000\002\031\004\000\002\032\004" +
    "\000\002\046\002\000\002\046\005\000\002\045\005\000" +
    "\002\045\003\000\002\045\002\000\002\033\006\000\002" +
    "\035\004\000\002\035\004\000\002\035\004\000\002\035" +
    "\005\000\002\035\004\000\002\035\004\000\002\035\005" +
    "\000\002\035\004\000\002\035\004\000\002\035\005\000" +
    "\002\035\004\000\002\035\004\000\002\035\005\000\002" +
    "\035\004\000\002\035\004\000\002\035\005\000\002\035" +
    "\004\000\002\035\004\000\002\035\005\000\002\035\004" +
    "\000\002\035\004\000\002\035\005\000\002\035\004\000" +
    "\002\035\004\000\002\035\005\000\002\035\004\000\002" +
    "\035\004\000\002\035\005\000\002\035\004\000\002\035" +
    "\004\000\002\035\005\000\002\035\004\000\002\035\004" +
    "\000\002\035\005\000\002\035\004\000\002\035\004\000" +
    "\002\035\005\000\002\035\004\000\002\035\004\000\002" +
    "\035\005\000\002\035\003\000\002\035\004\000\002\035" +
    "\005\000\002\035\004\000\002\035\004\000\002\035\003" +
    "\000\002\037\005\000\002\037\006\000\002\037\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\004\032\005\001\002\000\004\002\001\001" +
    "\002\000\004\060\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\000\001\002\000\004\050\011\001\002\000" +
    "\016\033\012\034\ufffa\035\ufffa\036\ufffa\045\ufffa\046\ufffa" +
    "\001\002\000\016\034\ufff8\035\ufff8\036\ufff8\045\ufff8\046" +
    "\ufff8\060\ufff8\001\002\000\006\045\310\046\ufffd\001\002" +
    "\000\014\034\016\035\ufff6\036\ufff6\045\ufff6\046\ufff6\001" +
    "\002\000\012\035\162\036\ufff2\045\ufff2\046\ufff2\001\002" +
    "\000\014\035\ufff4\036\ufff4\045\ufff4\046\ufff4\060\ufff4\001" +
    "\002\000\014\035\ufff7\036\ufff7\045\ufff7\046\ufff7\060\020" +
    "\001\002\000\004\012\021\001\002\000\014\023\023\024" +
    "\025\030\027\031\024\060\032\001\002\000\010\046\uffe0" +
    "\050\uffe0\057\uffe0\001\002\000\010\046\uffdd\050\uffdd\057" +
    "\uffdd\001\002\000\044\004\056\005\071\006\052\007\067" +
    "\010\053\012\072\013\073\014\055\015\064\016\063\017" +
    "\070\020\057\021\054\022\060\056\062\060\061\061\066" +
    "\001\002\000\010\046\uffdc\050\uffdc\057\uffdc\001\002\000" +
    "\014\023\023\024\025\030\027\031\051\060\032\001\002" +
    "\000\010\046\uffd7\050\uffd7\060\037\001\002\000\010\046" +
    "\uffdb\050\uffdb\057\uffdb\001\002\000\004\050\034\001\002" +
    "\000\010\046\uffde\050\uffde\057\uffde\001\002\000\010\046" +
    "\uffdf\050\uffdf\057\uffdf\001\002\000\014\035\ufff5\036\ufff5" +
    "\045\ufff5\046\ufff5\060\ufff5\001\002\000\006\046\uffd8\050" +
    "\uffd8\001\002\000\006\051\045\052\044\001\002\000\006" +
    "\051\uffef\052\uffef\001\002\000\006\046\042\050\041\001" +
    "\002\000\010\046\uffd7\050\uffd7\060\037\001\002\000\010" +
    "\046\uffda\050\uffda\057\uffda\001\002\000\006\046\uffd9\050" +
    "\uffd9\001\002\000\004\060\047\001\002\000\014\023\023" +
    "\024\025\030\027\031\024\060\032\001\002\000\006\046" +
    "\uffd6\050\uffd6\001\002\000\006\051\uffee\052\uffee\001\002" +
    "\000\010\046\uffd5\050\uffd5\057\uffd5\001\002\000\044\004" +
    "\056\005\071\006\052\007\067\010\053\012\072\013\073" +
    "\014\055\015\064\016\063\017\070\020\057\021\054\022" +
    "\060\056\062\060\061\061\066\001\002\000\044\004\056" +
    "\005\071\006\052\007\067\010\053\012\072\013\073\014" +
    "\055\015\064\016\063\017\070\020\057\021\054\022\060" +
    "\056\062\060\061\061\066\001\002\000\044\004\056\005" +
    "\071\006\052\007\067\010\053\012\072\013\073\014\055" +
    "\015\064\016\063\017\070\020\057\021\054\022\060\056" +
    "\062\060\061\061\066\001\002\000\044\004\056\005\071" +
    "\006\052\007\067\010\053\012\072\013\073\014\055\015" +
    "\064\016\063\017\070\020\057\021\054\022\060\056\062" +
    "\060\061\061\066\001\002\000\044\004\056\005\071\006" +
    "\052\007\067\010\053\012\072\013\073\014\055\015\064" +
    "\016\063\017\070\020\057\021\054\022\060\056\062\060" +
    "\061\061\066\001\002\000\044\004\056\005\071\006\052" +
    "\007\067\010\053\012\072\013\073\014\055\015\064\016" +
    "\063\017\070\020\057\021\054\022\060\056\062\060\061" +
    "\061\066\001\002\000\044\004\056\005\071\006\052\007" +
    "\067\010\053\012\072\013\073\014\055\015\064\016\063" +
    "\017\070\020\057\021\054\022\060\056\062\060\061\061" +
    "\066\001\002\000\070\004\056\005\071\006\052\007\067" +
    "\010\053\012\072\013\073\014\055\015\064\016\063\017" +
    "\070\020\uff8c\021\uff8c\022\060\040\uff8c\041\uff8c\042\uff8c" +
    "\044\uff8c\046\uff8c\047\uff8c\050\uff8c\052\uff8c\055\uff8c\056" +
    "\062\057\uff8c\060\061\061\066\001\002\000\064\004\uff84" +
    "\005\uff84\006\uff84\007\uff84\010\uff84\012\uff84\013\uff84\014" +
    "\uff84\015\uff84\016\uff84\017\uff84\020\uff84\021\uff84\040\uff84" +
    "\041\uff84\042\uff84\044\uff84\046\uff84\047\uff84\050\uff84\052" +
    "\uff84\053\uff84\054\uff84\055\uff84\057\uff84\001\002\000\046" +
    "\004\056\005\071\006\052\007\067\010\053\012\072\013" +
    "\073\014\055\015\064\016\063\017\070\020\057\021\054" +
    "\022\060\056\062\057\137\060\061\061\066\001\002\000" +
    "\044\004\056\005\071\006\052\007\067\010\053\012\072" +
    "\013\073\014\055\015\064\016\063\017\070\020\057\021" +
    "\054\022\060\056\062\060\061\061\066\001\002\000\044" +
    "\004\056\005\071\006\052\007\067\010\053\012\072\013" +
    "\073\014\055\015\064\016\063\017\070\020\057\021\054" +
    "\022\060\056\062\060\061\061\066\001\002\000\036\004" +
    "\103\005\075\006\107\007\077\010\101\012\104\013\102" +
    "\014\110\015\105\016\106\017\100\020\111\021\076\047" +
    "\134\001\002\000\062\004\uff87\005\uff87\006\uff87\007\uff87" +
    "\010\uff87\012\uff87\013\uff87\014\uff87\015\uff87\016\uff87\017" +
    "\uff87\020\uff87\021\uff87\040\uff87\041\uff87\042\uff87\044\uff87" +
    "\046\uff87\047\uff87\050\uff87\052\uff87\055\uff87\057\uff87\061" +
    "\133\001\002\000\044\004\056\005\071\006\052\007\067" +
    "\010\053\012\072\013\073\014\055\015\064\016\063\017" +
    "\070\020\057\021\054\022\060\056\062\060\061\061\066" +
    "\001\002\000\044\004\056\005\071\006\052\007\067\010" +
    "\053\012\072\013\073\014\055\015\064\016\063\017\070" +
    "\020\057\021\054\022\060\056\062\060\061\061\066\001" +
    "\002\000\044\004\056\005\071\006\052\007\067\010\053" +
    "\012\072\013\073\014\055\015\064\016\063\017\070\020" +
    "\057\021\054\022\060\056\062\060\061\061\066\001\002" +
    "\000\044\004\056\005\071\006\052\007\067\010\053\012" +
    "\072\013\073\014\055\015\064\016\063\017\070\020\057" +
    "\021\054\022\060\056\062\060\061\061\066\001\002\000" +
    "\044\004\056\005\071\006\052\007\067\010\053\012\072" +
    "\013\073\014\055\015\064\016\063\017\070\020\057\021" +
    "\054\022\060\056\062\060\061\061\066\001\002\000\060" +
    "\004\103\005\075\006\107\007\077\010\101\012\uffb0\013" +
    "\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0" +
    "\040\uffb0\041\uffb0\042\uffb0\044\uffb0\046\uffb0\047\uffb0\050" +
    "\uffb0\052\uffb0\055\uffb0\057\uffb0\001\002\000\070\004\uff9d" +
    "\005\uff9d\006\052\007\067\010\053\012\uff9d\013\uff9d\014" +
    "\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022\060" +
    "\040\uff9d\041\uff9d\042\uff9d\044\uff9d\046\uff9d\047\uff9d\050" +
    "\uff9d\052\uff9d\055\uff9d\056\062\057\uff9d\060\061\061\066" +
    "\001\002\000\070\004\056\005\071\006\052\007\067\010" +
    "\053\012\072\013\073\014\055\015\064\016\063\017\070" +
    "\020\uff91\021\uff91\022\060\040\uff91\041\uff91\042\uff91\044" +
    "\uff91\046\uff91\047\uff91\050\uff91\052\uff91\055\uff91\056\062" +
    "\057\uff91\060\061\061\066\001\002\000\070\004\uff97\005" +
    "\uff97\006\uff97\007\uff97\010\uff97\012\uff97\013\uff97\014\uff97" +
    "\015\uff97\016\uff97\017\uff97\020\uff97\021\uff97\022\060\040" +
    "\uff97\041\uff97\042\uff97\044\uff97\046\uff97\047\uff97\050\uff97" +
    "\052\uff97\055\uff97\056\062\057\uff97\060\061\061\066\001" +
    "\002\000\070\004\056\005\071\006\052\007\067\010\053" +
    "\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020" +
    "\uffa6\021\uffa6\022\060\040\uffa6\041\uffa6\042\uffa6\044\uffa6" +
    "\046\uffa6\047\uffa6\050\uffa6\052\uffa6\055\uffa6\056\062\057" +
    "\uffa6\060\061\061\066\001\002\000\070\004\uff94\005\uff94" +
    "\006\uff94\007\uff94\010\uff94\012\uff94\013\uff94\014\uff94\015" +
    "\uff94\016\uff94\017\uff94\020\uff94\021\uff94\022\060\040\uff94" +
    "\041\uff94\042\uff94\044\uff94\046\uff94\047\uff94\050\uff94\052" +
    "\uff94\055\uff94\056\062\057\uff94\060\061\061\066\001\002" +
    "\000\070\004\056\005\071\006\052\007\067\010\053\012" +
    "\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf" +
    "\021\uffaf\022\060\040\uffaf\041\uffaf\042\uffaf\044\uffaf\046" +
    "\uffaf\047\uffaf\050\uffaf\052\uffaf\055\uffaf\056\062\057\uffaf" +
    "\060\061\061\066\001\002\000\070\004\uffa0\005\uffa0\006" +
    "\052\007\067\010\053\012\uffa0\013\uffa0\014\uffa0\015\uffa0" +
    "\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022\060\040\uffa0\041" +
    "\uffa0\042\uffa0\044\uffa0\046\uffa0\047\uffa0\050\uffa0\052\uffa0" +
    "\055\uffa0\056\062\057\uffa0\060\061\061\066\001\002\000" +
    "\070\004\056\005\071\006\052\007\067\010\053\012\uffb2" +
    "\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021" +
    "\uffb2\022\060\040\uffb2\041\uffb2\042\uffb2\044\uffb2\046\uffb2" +
    "\047\uffb2\050\uffb2\052\uffb2\055\uffb2\056\062\057\uffb2\060" +
    "\061\061\066\001\002\000\070\004\056\005\071\006\052" +
    "\007\067\010\053\012\uffac\013\uffac\014\uffac\015\uffac\016" +
    "\uffac\017\uffac\020\uffac\021\uffac\022\060\040\uffac\041\uffac" +
    "\042\uffac\044\uffac\046\uffac\047\uffac\050\uffac\052\uffac\055" +
    "\uffac\056\062\057\uffac\060\061\061\066\001\002\000\070" +
    "\004\056\005\071\006\052\007\067\010\053\012\uffa3\013" +
    "\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3" +
    "\022\060\040\uffa3\041\uffa3\042\uffa3\044\uffa3\046\uffa3\047" +
    "\uffa3\050\uffa3\052\uffa3\055\uffa3\056\062\057\uffa3\060\061" +
    "\061\066\001\002\000\070\004\uff9a\005\uff9a\006\uff9a\007" +
    "\uff9a\010\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a" +
    "\017\uff9a\020\uff9a\021\uff9a\022\060\040\uff9a\041\uff9a\042" +
    "\uff9a\044\uff9a\046\uff9a\047\uff9a\050\uff9a\052\uff9a\055\uff9a" +
    "\056\062\057\uff9a\060\061\061\066\001\002\000\070\004" +
    "\056\005\071\006\052\007\067\010\053\012\uffa9\013\uffa9" +
    "\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022" +
    "\060\040\uffa9\041\uffa9\042\uffa9\044\uffa9\046\uffa9\047\uffa9" +
    "\050\uffa9\052\uffa9\055\uffa9\056\062\057\uffa9\060\061\061" +
    "\066\001\002\000\070\004\056\005\071\006\052\007\067" +
    "\010\053\012\072\013\073\014\055\015\064\016\063\017" +
    "\070\020\uff8e\021\054\022\060\040\uff8e\041\uff8e\042\uff8e" +
    "\044\uff8e\046\uff8e\047\uff8e\050\uff8e\052\uff8e\055\uff8e\056" +
    "\062\057\uff8e\060\061\061\066\001\002\000\060\004\103" +
    "\005\075\006\107\007\077\010\101\012\104\013\102\014" +
    "\110\015\105\016\106\017\100\020\uff8d\021\076\040\uff8d" +
    "\041\uff8d\042\uff8d\044\uff8d\046\uff8d\047\uff8d\050\uff8d\052" +
    "\uff8d\055\uff8d\057\uff8d\001\002\000\060\004\103\005\075" +
    "\006\107\007\077\010\101\012\uffa8\013\uffa8\014\uffa8\015" +
    "\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\040\uffa8\041\uffa8" +
    "\042\uffa8\044\uffa8\046\uffa8\047\uffa8\050\uffa8\052\uffa8\055" +
    "\uffa8\057\uffa8\001\002\000\060\004\uff99\005\uff99\006\uff99" +
    "\007\uff99\010\uff99\012\uff99\013\uff99\014\uff99\015\uff99\016" +
    "\uff99\017\uff99\020\uff99\021\uff99\040\uff99\041\uff99\042\uff99" +
    "\044\uff99\046\uff99\047\uff99\050\uff99\052\uff99\055\uff99\057" +
    "\uff99\001\002\000\060\004\103\005\075\006\107\007\077" +
    "\010\101\012\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017" +
    "\uffa2\020\uffa2\021\uffa2\040\uffa2\041\uffa2\042\uffa2\044\uffa2" +
    "\046\uffa2\047\uffa2\050\uffa2\052\uffa2\055\uffa2\057\uffa2\001" +
    "\002\000\060\004\103\005\075\006\107\007\077\010\101" +
    "\012\uffab\013\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020" +
    "\uffab\021\uffab\040\uffab\041\uffab\042\uffab\044\uffab\046\uffab" +
    "\047\uffab\050\uffab\052\uffab\055\uffab\057\uffab\001\002\000" +
    "\060\004\103\005\075\006\107\007\077\010\101\012\uffb1" +
    "\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021" +
    "\uffb1\040\uffb1\041\uffb1\042\uffb1\044\uffb1\046\uffb1\047\uffb1" +
    "\050\uffb1\052\uffb1\055\uffb1\057\uffb1\001\002\000\060\004" +
    "\uff9f\005\uff9f\006\107\007\077\010\101\012\uff9f\013\uff9f" +
    "\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\040" +
    "\uff9f\041\uff9f\042\uff9f\044\uff9f\046\uff9f\047\uff9f\050\uff9f" +
    "\052\uff9f\055\uff9f\057\uff9f\001\002\000\060\004\103\005" +
    "\075\006\107\007\077\010\101\012\uffae\013\uffae\014\uffae" +
    "\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae\040\uffae\041" +
    "\uffae\042\uffae\044\uffae\046\uffae\047\uffae\050\uffae\052\uffae" +
    "\055\uffae\057\uffae\001\002\000\060\004\uff93\005\uff93\006" +
    "\uff93\007\uff93\010\uff93\012\uff93\013\uff93\014\uff93\015\uff93" +
    "\016\uff93\017\uff93\020\uff93\021\uff93\040\uff93\041\uff93\042" +
    "\uff93\044\uff93\046\uff93\047\uff93\050\uff93\052\uff93\055\uff93" +
    "\057\uff93\001\002\000\060\004\103\005\075\006\107\007" +
    "\077\010\101\012\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5" +
    "\017\uffa5\020\uffa5\021\uffa5\040\uffa5\041\uffa5\042\uffa5\044" +
    "\uffa5\046\uffa5\047\uffa5\050\uffa5\052\uffa5\055\uffa5\057\uffa5" +
    "\001\002\000\060\004\uff96\005\uff96\006\uff96\007\uff96\010" +
    "\uff96\012\uff96\013\uff96\014\uff96\015\uff96\016\uff96\017\uff96" +
    "\020\uff96\021\uff96\040\uff96\041\uff96\042\uff96\044\uff96\046" +
    "\uff96\047\uff96\050\uff96\052\uff96\055\uff96\057\uff96\001\002" +
    "\000\060\004\103\005\075\006\107\007\077\010\101\012" +
    "\104\013\102\014\110\015\105\016\106\017\100\020\uff90" +
    "\021\uff90\040\uff90\041\uff90\042\uff90\044\uff90\046\uff90\047" +
    "\uff90\050\uff90\052\uff90\055\uff90\057\uff90\001\002\000\060" +
    "\004\uff9c\005\uff9c\006\107\007\077\010\101\012\uff9c\013" +
    "\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c" +
    "\040\uff9c\041\uff9c\042\uff9c\044\uff9c\046\uff9c\047\uff9c\050" +
    "\uff9c\052\uff9c\055\uff9c\057\uff9c\001\002\000\060\004\103" +
    "\005\075\006\107\007\077\010\101\012\uffb3\013\uffb3\014" +
    "\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\040\uffb3" +
    "\041\uffb3\042\uffb3\044\uffb3\046\uffb3\047\uffb3\050\uffb3\052" +
    "\uffb3\055\uffb3\057\uffb3\001\002\000\060\004\uff9e\005\uff9e" +
    "\006\107\007\077\010\101\012\uff9e\013\uff9e\014\uff9e\015" +
    "\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e\040\uff9e\041\uff9e" +
    "\042\uff9e\044\uff9e\046\uff9e\047\uff9e\050\uff9e\052\uff9e\055" +
    "\uff9e\057\uff9e\001\002\000\060\004\103\005\075\006\107" +
    "\007\077\010\101\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016" +
    "\uffa7\017\uffa7\020\uffa7\021\uffa7\040\uffa7\041\uffa7\042\uffa7" +
    "\044\uffa7\046\uffa7\047\uffa7\050\uffa7\052\uffa7\055\uffa7\057" +
    "\uffa7\001\002\000\060\004\uff98\005\uff98\006\uff98\007\uff98" +
    "\010\uff98\012\uff98\013\uff98\014\uff98\015\uff98\016\uff98\017" +
    "\uff98\020\uff98\021\uff98\040\uff98\041\uff98\042\uff98\044\uff98" +
    "\046\uff98\047\uff98\050\uff98\052\uff98\055\uff98\057\uff98\001" +
    "\002\000\060\004\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4" +
    "\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020" +
    "\uffb4\021\uffb4\040\uffb4\041\uffb4\042\uffb4\044\uffb4\046\uffb4" +
    "\047\uffb4\050\uffb4\052\uffb4\055\uffb4\057\uffb4\001\002\000" +
    "\014\023\uffd4\024\uffd4\030\uffd4\031\uffd4\060\uffd4\001\002" +
    "\000\060\004\103\005\075\006\107\007\077\010\101\012" +
    "\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020\uffad" +
    "\021\uffad\040\uffad\041\uffad\042\uffad\044\uffad\046\uffad\047" +
    "\uffad\050\uffad\052\uffad\055\uffad\057\uffad\001\002\000\060" +
    "\004\103\005\075\006\107\007\077\010\101\012\uffa4\013" +
    "\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4" +
    "\040\uffa4\041\uffa4\042\uffa4\044\uffa4\046\uffa4\047\uffa4\050" +
    "\uffa4\052\uffa4\055\uffa4\057\uffa4\001\002\000\060\004\uff89" +
    "\005\uff89\006\uff89\007\uff89\010\uff89\012\uff89\013\uff89\014" +
    "\uff89\015\uff89\016\uff89\017\uff89\020\uff89\021\uff89\040\uff89" +
    "\041\uff89\042\uff89\044\uff89\046\uff89\047\uff89\050\uff89\052" +
    "\uff89\055\uff89\057\uff89\001\002\000\036\004\103\005\075" +
    "\006\107\007\077\010\101\012\104\013\102\014\110\015" +
    "\105\016\106\017\100\020\111\021\076\057\141\001\002" +
    "\000\060\004\uff8a\005\uff8a\006\uff8a\007\uff8a\010\uff8a\012" +
    "\uff8a\013\uff8a\014\uff8a\015\uff8a\016\uff8a\017\uff8a\020\uff8a" +
    "\021\uff8a\040\uff8a\041\uff8a\042\uff8a\044\uff8a\046\uff8a\047" +
    "\uff8a\050\uff8a\052\uff8a\055\uff8a\057\uff8a\001\002\000\064" +
    "\004\uff88\005\uff88\006\uff88\007\uff88\010\uff88\012\uff88\013" +
    "\uff88\014\uff88\015\uff88\016\uff88\017\uff88\020\uff88\021\uff88" +
    "\040\uff88\041\uff88\042\uff88\044\uff88\046\uff88\047\uff88\050" +
    "\uff88\052\uff88\053\143\054\144\055\uff88\057\uff88\001\002" +
    "\000\004\060\147\001\002\000\044\004\056\005\071\006" +
    "\052\007\067\010\053\012\072\013\073\014\055\015\064" +
    "\016\063\017\070\020\057\021\054\022\060\056\062\060" +
    "\061\061\066\001\002\000\036\004\103\005\075\006\107" +
    "\007\077\010\101\012\104\013\102\014\110\015\105\016" +
    "\106\017\100\020\111\021\076\055\146\001\002\000\066" +
    "\004\uff85\005\uff85\006\uff85\007\uff85\010\uff85\011\uff85\012" +
    "\uff85\013\uff85\014\uff85\015\uff85\016\uff85\017\uff85\020\uff85" +
    "\021\uff85\040\uff85\041\uff85\042\uff85\044\uff85\046\uff85\047" +
    "\uff85\050\uff85\052\uff85\053\uff85\054\uff85\055\uff85\057\uff85" +
    "\001\002\000\066\004\uff86\005\uff86\006\uff86\007\uff86\010" +
    "\uff86\011\uff86\012\uff86\013\uff86\014\uff86\015\uff86\016\uff86" +
    "\017\uff86\020\uff86\021\uff86\040\uff86\041\uff86\042\uff86\044" +
    "\uff86\046\uff86\047\uff86\050\uff86\052\uff86\053\uff86\054\uff86" +
    "\055\uff86\057\uff86\001\002\000\060\004\103\005\075\006" +
    "\107\007\077\010\101\012\104\013\102\014\110\015\105" +
    "\016\106\017\100\020\uff8b\021\uff8b\040\uff8b\041\uff8b\042" +
    "\uff8b\044\uff8b\046\uff8b\047\uff8b\050\uff8b\052\uff8b\055\uff8b" +
    "\057\uff8b\001\002\000\060\004\103\005\075\006\107\007" +
    "\077\010\101\012\104\013\102\014\110\015\105\016\106" +
    "\017\100\020\uff8f\021\076\040\uff8f\041\uff8f\042\uff8f\044" +
    "\uff8f\046\uff8f\047\uff8f\050\uff8f\052\uff8f\055\uff8f\057\uff8f" +
    "\001\002\000\060\004\uffa1\005\uffa1\006\107\007\077\010" +
    "\101\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1" +
    "\020\uffa1\021\uffa1\040\uffa1\041\uffa1\042\uffa1\044\uffa1\046" +
    "\uffa1\047\uffa1\050\uffa1\052\uffa1\055\uffa1\057\uffa1\001\002" +
    "\000\060\004\103\005\075\006\107\007\077\010\101\012" +
    "\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa" +
    "\021\uffaa\040\uffaa\041\uffaa\042\uffaa\044\uffaa\046\uffaa\047" +
    "\uffaa\050\uffaa\052\uffaa\055\uffaa\057\uffaa\001\002\000\060" +
    "\004\103\005\075\006\107\007\077\010\101\012\104\013" +
    "\102\014\110\015\105\016\106\017\100\020\uff92\021\uff92" +
    "\040\uff92\041\uff92\042\uff92\044\uff92\046\uff92\047\uff92\050" +
    "\uff92\052\uff92\055\uff92\057\uff92\001\002\000\060\004\uff95" +
    "\005\uff95\006\uff95\007\uff95\010\uff95\012\uff95\013\uff95\014" +
    "\uff95\015\uff95\016\uff95\017\uff95\020\uff95\021\uff95\040\uff95" +
    "\041\uff95\042\uff95\044\uff95\046\uff95\047\uff95\050\uff95\052" +
    "\uff95\055\uff95\057\uff95\001\002\000\060\004\uff9b\005\uff9b" +
    "\006\uff9b\007\uff9b\010\uff9b\012\uff9b\013\uff9b\014\uff9b\015" +
    "\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b\040\uff9b\041\uff9b" +
    "\042\uff9b\044\uff9b\046\uff9b\047\uff9b\050\uff9b\052\uff9b\055" +
    "\uff9b\057\uff9b\001\002\000\036\004\103\005\075\006\107" +
    "\007\077\010\101\012\104\013\102\014\110\015\105\016" +
    "\106\017\100\020\111\021\076\047\160\001\002\000\014" +
    "\023\uffd3\024\uffd3\030\uffd3\031\uffd3\060\uffd3\001\002\000" +
    "\010\036\uffed\045\uffed\046\uffed\001\002\000\012\036\ufff0" +
    "\045\ufff0\046\ufff0\060\ufff0\001\002\000\012\036\ufff3\045" +
    "\ufff3\046\ufff3\060\037\001\002\000\006\051\165\052\044" +
    "\001\002\000\014\023\023\024\025\030\027\031\024\060" +
    "\032\001\002\000\004\050\167\001\002\000\012\036\ufff1" +
    "\045\ufff1\046\ufff1\060\ufff1\001\002\000\010\036\171\045" +
    "\ufffc\046\ufffc\001\002\000\004\060\270\001\002\000\004" +
    "\050\173\001\002\000\016\033\012\034\ufffa\035\ufffa\036" +
    "\ufffa\045\ufffa\046\ufffa\001\002\000\006\045\200\046\uffe8" +
    "\001\002\000\004\050\176\001\002\000\010\036\uffec\045" +
    "\uffec\046\uffec\001\002\000\004\046\266\001\002\000\022" +
    "\025\201\026\210\027\204\037\206\043\202\046\uffcb\050" +
    "\uffcb\060\211\001\002\000\006\056\261\060\260\001\002" +
    "\000\044\004\056\005\071\006\052\007\067\010\053\012" +
    "\072\013\073\014\055\015\064\016\063\017\070\020\057" +
    "\021\054\022\060\056\062\060\061\061\066\001\002\000" +
    "\012\041\uffd0\042\uffd0\046\uffd0\050\uffd0\001\002\000\012" +
    "\041\uffc2\042\uffc2\046\uffc2\050\uffc2\001\002\000\012\041" +
    "\uffcc\042\uffcc\046\uffcc\050\uffcc\001\002\000\044\004\056" +
    "\005\071\006\052\007\067\010\053\012\072\013\073\014" +
    "\055\015\064\016\063\017\070\020\057\021\054\022\060" +
    "\056\062\060\061\061\066\001\002\000\012\041\uffd2\042" +
    "\uffd2\046\uffd2\050\uffd2\001\002\000\006\056\233\060\232" +
    "\001\002\000\022\011\uff84\041\uffba\042\uffba\046\uffba\050" +
    "\uffba\053\uff84\054\uff84\056\222\001\002\000\012\041\uffcf" +
    "\042\uffcf\046\uffcf\050\uffcf\001\002\000\012\041\uffcd\042" +
    "\uffcd\046\uffcd\050\uffcd\001\002\000\012\041\uffce\042\uffce" +
    "\046\uffce\050\uffce\001\002\000\006\046\uffe9\050\216\001" +
    "\002\000\026\025\201\026\210\027\204\037\206\041\uffcb" +
    "\042\uffcb\043\202\046\uffcb\050\uffcb\060\211\001\002\000" +
    "\012\041\uffd1\042\uffd1\046\uffd1\050\uffd1\001\002\000\010" +
    "\011\230\053\143\054\144\001\002\000\012\041\uffbb\042" +
    "\uffbb\046\uffbb\050\uffbb\001\002\000\050\004\056\005\071" +
    "\006\052\007\067\010\053\012\072\013\073\014\055\015" +
    "\064\016\063\017\070\020\057\021\054\022\060\052\uffb6" +
    "\056\062\057\uffb6\060\061\061\066\001\002\000\040\004" +
    "\103\005\075\006\107\007\077\010\101\012\104\013\102" +
    "\014\110\015\105\016\106\017\100\020\111\021\076\052" +
    "\uffb7\057\uffb7\001\002\000\006\052\225\057\226\001\002" +
    "\000\044\004\056\005\071\006\052\007\067\010\053\012" +
    "\072\013\073\014\055\015\064\016\063\017\070\020\057" +
    "\021\054\022\060\056\062\060\061\061\066\001\002\000" +
    "\012\041\uffb9\042\uffb9\046\uffb9\050\uffb9\001\002\000\040" +
    "\004\103\005\075\006\107\007\077\010\101\012\104\013" +
    "\102\014\110\015\105\016\106\017\100\020\111\021\076" +
    "\052\uffb8\057\uffb8\001\002\000\044\004\056\005\071\006" +
    "\052\007\067\010\053\012\072\013\073\014\055\015\064" +
    "\016\063\017\070\020\057\021\054\022\060\056\062\060" +
    "\061\061\066\001\002\000\044\004\103\005\075\006\107" +
    "\007\077\010\101\012\104\013\102\014\110\015\105\016" +
    "\106\017\100\020\111\021\076\041\uffb5\042\uffb5\046\uffb5" +
    "\050\uffb5\001\002\000\004\057\237\001\002\000\006\057" +
    "\234\060\235\001\002\000\012\041\uffc5\042\uffc5\046\uffc5" +
    "\050\uffc5\001\002\000\014\041\uffc4\042\uffc4\046\uffc4\050" +
    "\uffc4\057\236\001\002\000\012\041\uffc3\042\uffc3\046\uffc3" +
    "\050\uffc3\001\002\000\012\041\uffc7\042\uffc7\046\uffc7\050" +
    "\uffc7\001\002\000\036\004\103\005\075\006\107\007\077" +
    "\010\101\012\104\013\102\014\110\015\105\016\106\017" +
    "\100\020\111\021\076\040\241\001\002\000\026\025\201" +
    "\026\210\027\204\037\206\041\uffcb\042\uffcb\043\202\046" +
    "\uffcb\050\uffcb\060\211\001\002\000\012\041\uffbe\042\uffbe" +
    "\046\uffbe\050\216\001\002\000\010\041\245\042\244\046" +
    "\uffbd\001\002\000\022\025\201\026\210\027\204\037\206" +
    "\043\202\046\uffcb\050\uffcb\060\211\001\002\000\044\004" +
    "\056\005\071\006\052\007\067\010\053\012\072\013\073" +
    "\014\055\015\064\016\063\017\070\020\057\021\054\022" +
    "\060\056\062\060\061\061\066\001\002\000\004\046\247" +
    "\001\002\000\012\041\uffc0\042\uffc0\046\uffc0\050\uffc0\001" +
    "\002\000\036\004\103\005\075\006\107\007\077\010\101" +
    "\012\104\013\102\014\110\015\105\016\106\017\100\020" +
    "\111\021\076\040\251\001\002\000\026\025\201\026\210" +
    "\027\204\037\206\041\uffcb\042\uffcb\043\202\046\uffcb\050" +
    "\uffcb\060\211\001\002\000\012\041\uffbf\042\uffbf\046\uffbf" +
    "\050\216\001\002\000\006\046\uffbc\050\216\001\002\000" +
    "\036\004\103\005\075\006\107\007\077\010\101\012\104" +
    "\013\102\014\110\015\105\016\106\017\100\020\111\021" +
    "\076\044\255\001\002\000\022\025\201\026\210\027\204" +
    "\037\206\043\202\046\uffcb\050\uffcb\060\211\001\002\000" +
    "\006\046\257\050\216\001\002\000\012\041\uffc1\042\uffc1" +
    "\046\uffc1\050\uffc1\001\002\000\004\057\265\001\002\000" +
    "\006\057\262\060\263\001\002\000\012\041\uffc6\042\uffc6" +
    "\046\uffc6\050\uffc6\001\002\000\014\041\uffc8\042\uffc8\046" +
    "\uffc8\050\uffc8\057\264\001\002\000\012\041\uffca\042\uffca" +
    "\046\uffca\050\uffca\001\002\000\012\041\uffc9\042\uffc9\046" +
    "\uffc9\050\uffc9\001\002\000\004\060\267\001\002\000\004" +
    "\050\uffea\001\002\000\006\050\uffe7\056\272\001\002\000" +
    "\004\050\uffeb\001\002\000\010\035\273\057\275\060\uffe1" +
    "\001\002\000\004\060\uffe2\001\002\000\006\050\303\057" +
    "\302\001\002\000\004\050\uffe6\001\002\000\004\060\037" +
    "\001\002\000\006\051\300\052\044\001\002\000\014\023" +
    "\023\024\025\030\027\031\024\060\032\001\002\000\006" +
    "\050\uffe3\057\uffe3\001\002\000\004\050\uffe5\001\002\000" +
    "\006\035\273\060\uffe1\001\002\000\004\060\037\001\002" +
    "\000\006\051\306\052\044\001\002\000\014\023\023\024" +
    "\025\030\027\031\024\060\032\001\002\000\006\050\uffe4" +
    "\057\uffe4\001\002\000\022\025\201\026\210\027\204\037" +
    "\206\043\202\046\uffcb\050\uffcb\060\211\001\002\000\004" +
    "\046\312\001\002\000\004\060\313\001\002\000\004\053" +
    "\314\001\002\000\004\002\uffff\001\002\000\006\046\ufffe" +
    "\050\216\001\002\000\016\034\ufffb\035\ufffb\036\ufffb\045" +
    "\ufffb\046\ufffb\060\317\001\002\000\004\012\320\001\002" +
    "\000\044\004\056\005\071\006\052\007\067\010\053\012" +
    "\072\013\073\014\055\015\064\016\063\017\070\020\057" +
    "\021\054\022\060\056\062\060\061\061\066\001\002\000" +
    "\036\004\103\005\075\006\107\007\077\010\101\012\104" +
    "\013\102\014\110\015\105\016\106\017\100\020\111\021" +
    "\076\050\322\001\002\000\016\034\ufff9\035\ufff9\036\ufff9" +
    "\045\ufff9\046\ufff9\060\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\012\012\013\001\001\000" +
    "\004\015\315\001\001\000\004\004\310\001\001\000\004" +
    "\013\014\001\001\000\004\014\160\001\001\000\004\016" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\020\025\036\030\041\032\042\027\043\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\156\001\001" +
    "\000\002\001\001\000\006\042\027\043\047\001\001\000" +
    "\010\022\034\023\037\040\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\022\042\040\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\020\025\036\045\041\032\042\027\043\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\064\001\001\000\004\035\155\001\001\000" +
    "\004\035\154\001\001\000\004\035\153\001\001\000\004" +
    "\035\152\001\001\000\004\035\151\001\001\000\004\035" +
    "\150\001\001\000\004\035\147\001\001\000\004\037\141" +
    "\001\001\000\004\035\137\001\001\000\004\035\135\001" +
    "\001\000\004\035\134\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\131\001\001\000\004\035\130\001" +
    "\001\000\004\035\127\001\001\000\004\035\126\001\001" +
    "\000\004\035\073\001\001\000\002\001\001\000\004\035" +
    "\125\001\001\000\004\035\124\001\001\000\004\035\123" +
    "\001\001\000\004\035\122\001\001\000\004\035\121\001" +
    "\001\000\004\035\120\001\001\000\004\035\117\001\001" +
    "\000\004\035\116\001\001\000\004\035\115\001\001\000" +
    "\004\035\114\001\001\000\004\035\113\001\001\000\004" +
    "\035\112\001\001\000\004\035\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\167\001\001\000\004\017\162\001\001\000\004" +
    "\040\163\001\001\000\002\001\001\000\014\020\025\036" +
    "\165\041\032\042\027\043\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\171\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\173\011\174\012\013" +
    "\001\001\000\004\007\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\021\204\024\214" +
    "\025\206\026\212\027\213\032\211\033\202\001\001\000" +
    "\002\001\001\000\004\035\253\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\237\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\037\217" +
    "\046\220\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\021\204\025\216" +
    "\026\212\027\213\032\211\033\202\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\035\222" +
    "\045\223\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\226\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\230\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\021\204\024\241\025\206\026\212\027\213\032\211" +
    "\033\202\001\001\000\004\030\242\001\001\000\004\031" +
    "\245\001\001\000\020\021\204\024\252\025\206\026\212" +
    "\027\213\032\211\033\202\001\001\000\004\035\247\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\021\204\024\251\025\206\026\212\027\213\032" +
    "\211\033\202\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\021\204\024\255\025\206\026" +
    "\212\027\213\032\211\033\202\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\044" +
    "\270\001\001\000\002\001\001\000\006\034\275\047\273" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\276\001\001\000\002\001\001\000\014" +
    "\020\025\036\300\041\032\042\027\043\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\303\001\001" +
    "\000\004\040\304\001\001\000\002\001\001\000\014\020" +
    "\025\036\306\041\032\042\027\043\021\001\001\000\002" +
    "\001\001\000\020\021\204\024\314\025\206\026\212\027" +
    "\213\032\211\033\202\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\320" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	callee = 1;
	graph = new CallGraph();

	id_name = new Vector<String>();
	id_type = new Vector<Integer>();
	exist_pro = new Vector<String>();

	dec_pro = new Vector<String>();
	dec_type = new Vector<String>();
	callee_pro = new Vector<String>();
	callee_type = new Vector<String>();

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }


	public CallGraph graph;
	public int callee;

	public String current_procedure;
	public Vector<String>	id_name;
	public Vector<Integer>	id_type;

	public Vector<String>	exist_pro;
	public Vector<String>	dec_pro;
	public Vector<String>	dec_type;
	public Vector<String>	callee_pro;
	public Vector<String>	callee_type;
	
	public int get_id(String s) throws SemanticException
	{
		for (int i=0; i<id_name.size(); i++)
		{
			if (id_name.elementAt(i).equals(s) == true)
				return id_type.elementAt(i).intValue();
		}
		throw new SemanticException("varible( "+ s +" ) without declaration!");
	}
	public int isExist(String s)
	{
		for (int i=0; i<exist_pro.size(); i++)
		{
			if (exist_pro.elementAt(i).equals(s) == true)
				return 1;
		}
		return 0;
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program_code ::= module_block 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			int flag = 0;

			//check the para
			for (int i=0; i<parser.callee_pro.size(); i++)
			{	
				//System.out.println("check: lee  "+parser.callee_pro.elementAt(i) + i);
				for (int j=0; j<parser.dec_pro.size() && flag==0; j++)
				{	
					//System.out.println("check: pro  "+parser.dec_pro.elementAt(j)+j);

					flag = 0;
					if (parser.callee_pro.elementAt(i).equals(parser.dec_pro.elementAt(j)) == true)
					{
						flag = 1;
						if (parser.callee_type.elementAt(i).length() !=parser.dec_type.elementAt(j).length())
							throw new ParameterMismatchedException();
						if (parser.callee_type.elementAt(i).equals(parser.dec_type.elementAt(j)) == false)
							throw new TypeMismatchedException();
					}
				}
				if (flag == 0)
					throw new SemanticException("the procedure<"+parser.callee_pro.elementAt(i)+"> is not declare!");
				flag = 0;
			}

			// succeed! show the graph.
			System.out.println("********Succeed!********");
			parser.graph.show();
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_code",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program_code EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // module_block ::= MODULE IDENTIFIER SEMI declarations module_begin END IDENTIFIER PERIOD 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
			if (id1.equals(id2) == false)
				throw new ModuleNameMismatchedException();
			RESULT = id1;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("module_block",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // module_begin ::= BEGIN statement_sequence 
            {
              String RESULT =null;
		
			//parser.graph.addProcedure("Main", "Main( )");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("module_begin",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // module_begin ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("module_begin",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declarations ::= const_declare type_declare var_declare procedure_declaration 
            {
              String RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // const_declare ::= CONST const_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_declare",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // const_declare ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_declare",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // const_list ::= const_list IDENTIFIER EQ expression SEMI 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			parser.id_name.add(id.toString());
			parser.id_type.add(e.intValue());	
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // const_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type_declare ::= TYPE type_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declare",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type_declare ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declare",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type_list ::= type_list IDENTIFIER EQ type_id SEMI 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			parser.id_name.add(id.toString());
			parser.id_type.add(t.intValue());
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type_list ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // var_declare ::= VAR var_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declare",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // var_declare ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declare",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // var_list ::= var_list identifier_list COLON type_id SEMI 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer id_list = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			for (int i=0; i<id_list.intValue(); i++)
				parser.id_type.add(t.intValue());
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // var_list ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // identifier_list ::= IDENTIFIER 
            {
              Integer RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			parser.id_name.add(id);
			RESULT = new Integer(1);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // identifier_list ::= identifier_list COMMA IDENTIFIER 
            {
              Integer RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer id_list = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			parser.id_name.add(id);
			RESULT = id_list.intValue()+1;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // procedure_declaration ::= 
            {
              String RESULT =null;
		
				//parser.graph.addProcedure("Main", "Main( )");
				parser.callee = 1;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // procedure_declaration ::= procedure_declaration procedure_heading SEMI procedure_body SEMI 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			
				if (id1.equals(id2) == false)
					throw new ProcedureNameMismatchedException();
				parser.current_procedure = "";
				parser.callee = 1;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // procedure_heading ::= PROCEDURE IDENTIFIER formal_parameters 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String fp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				parser.callee = 1;
				RESULT = id;
				String s_tem = "";
				for (int i=0; fp.isEmpty()==false && i<fp.length(); i++)
				{
					int i_tem = fp.charAt(i) - 48;
					if (i_tem == 1)	s_tem += "int ";
					if (i_tem == 2)	s_tem += "bool ";
					if (i_tem == 3)	s_tem += "record ";
					if (i_tem == 4)	s_tem +=	"array ";
				}
				if (parser.isExist(id) == 0)
				{
					parser.graph.addProcedure(id, id+"( )");
					parser.exist_pro.add(id);
				}
				parser.current_procedure = id;
				
				parser.dec_pro.addElement(id);
				parser.dec_type.addElement(fp);
				//System.out.println("pro_dec:"+id +" "+fp);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_heading",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // procedure_body ::= declarations procedure_begin END IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = id;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_body",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // procedure_begin ::= BEGIN statement_sequence 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_begin",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // procedure_begin ::= 
            {
              String RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_begin",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // formal_parameters ::= 
            {
              String RESULT =null;
			RESULT = "";	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameters",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // formal_parameters ::= LPAREN RPAREN 
            {
              String RESULT =null;
		
			RESULT = "";
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameters",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // formal_parameters ::= LPAREN fp_section RPAREN 
            {
              String RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String fp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			RESULT = fp.toString();
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameters",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // fp_section ::= fp_section SEMI var_if identifier_list COLON type_id 
            {
              String RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String fp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer id_list = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = fp.toString();
			for (int i=0; i<id_list.intValue(); i++)
			{
				parser.id_type.add(t.intValue());
				RESULT += (""+t.intValue());
			}			
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fp_section",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // fp_section ::= var_if identifier_list COLON type_id 
            {
              String RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer id_list = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = "";
			for (int i=0; i<id_list.intValue(); i++)
			{
				parser.id_type.add(t.intValue());
				RESULT += (""+t.intValue());
			}	
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fp_section",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // var_if ::= VAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_if",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // var_if ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_if",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type_id ::= type_but_array 
            {
              Integer RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = t;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_id",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type_id ::= array_type 
            {
              Integer RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = t;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_id",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type_but_array ::= IDENTIFIER 
            {
              Integer RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = 	parser.get_id(id);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_but_array",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type_but_array ::= INTEGER 
            {
              Integer RESULT =null;
		
			RESULT = new Integer(1);	/*1 is int*/
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_but_array",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type_but_array ::= BOOLEAN 
            {
              Integer RESULT =null;
		
			RESULT = new Integer(2);	/*2 is bool*/
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_but_array",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type_but_array ::= record_type 
            {
              Integer RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
			RESULT = new Integer(4);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_but_array",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // record_type ::= RECORD field_list END 
            {
              Integer RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // field_list ::= field_list SEMI field_one 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // field_list ::= field_one 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // field_one ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_one",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // field_one ::= identifier_list COLON type_id 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_one",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // array_type ::= array_part type_but_array 
            {
              Integer RESULT =null;
		
			RESULT = new Integer(3);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_type",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // array_part ::= array_part ARRAY expression OF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_part",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // array_part ::= ARRAY expression OF 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_part",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement_sequence ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_sequence",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement_sequence ::= statement_sequence SEMI statement 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_sequence",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement ::= assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement ::= procedure_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement ::= if_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statement ::= while_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statement ::= rw_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // statement ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // rw_statement ::= READ LPAREN IDENTIFIER RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rw_statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // rw_statement ::= READ IDENTIFIER RPAREN 
            {
              Object RESULT =null;
			if (true)	throw new MissingLeftParenthesisException();	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rw_statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // rw_statement ::= READ LPAREN IDENTIFIER 
            {
              Object RESULT =null;
			if (true)	throw new MissingRightParenthesisException();	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rw_statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // rw_statement ::= WRITE IDENTIFIER RPAREN 
            {
              Object RESULT =null;
			if (true)	throw new MissingLeftParenthesisException();	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rw_statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // rw_statement ::= READ LPAREN RPAREN 
            {
              Object RESULT =null;
		
			if (true)	throw new MissingOperatorException();
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rw_statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // rw_statement ::= WRITE LPAREN RPAREN 
            {
              Object RESULT =null;
		
			if (true)	throw new MissingOperatorException();
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rw_statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // rw_statement ::= WRITE LPAREN IDENTIFIER 
            {
              Object RESULT =null;
			if (true)	throw new MissingRightParenthesisException();	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rw_statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // rw_statement ::= WRITE LPAREN IDENTIFIER RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rw_statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // rw_statement ::= WRITELN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rw_statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // while_statement ::= WHILE expression DO statement_sequence END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
			if (e.intValue() != 2)	throw new TypeMismatchedException();
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // if_statement ::= IF expression THEN statement_sequence elsif_statement else_statement END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
			if (e.intValue() != 2)	throw new TypeMismatchedException();	
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // elsif_statement ::= elsif_statement ELSIF expression THEN statement_sequence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsif_statement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // elsif_statement ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsif_statement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // else_statement ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // else_statement ::= ELSE statement_sequence 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // procedure_call ::= IDENTIFIER actual_parameters 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int apleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int apright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ap = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			String s_tem = "";
			for (int i=0; ap.isEmpty()==false && i<ap.length(); i++)
			{
				int i_tem = ap.charAt(i) - 48;
				if (i_tem == 1)	s_tem += "int ";
				if (i_tem == 2)	s_tem += "bool ";
				if (i_tem == 3)	s_tem += "record ";
				if (i_tem == 4)	s_tem +=	"array ";
			}
			parser.callee_pro.addElement(id);
			parser.callee_type.addElement(ap);
			//System.out.println("callee:"+id +" "+ap);

			if (parser.callee==1 && parser.current_procedure.isEmpty())
			{
				parser.current_procedure = "Main";
				parser.graph.addProcedure("Main", "Main( )");
			}
			parser.graph.addCallSite(parser.current_procedure+parser.callee, parser.current_procedure, id+"( "+s_tem+")");
			if (parser.isExist(id) == 0)
			{
				parser.graph.addProcedure(id, id+"( )");
				parser.exist_pro.add(id);
			}
			parser.graph.addEdge(parser.current_procedure+parser.callee, id);
			parser.callee++;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_call",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // actual_parameters ::= 
            {
              String RESULT =null;
			RESULT = "";	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameters",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // actual_parameters ::= LPAREN ap_list RPAREN 
            {
              String RESULT =null;
		int apleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String ap = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = ap.toString();	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameters",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ap_list ::= ap_list COMMA expression 
            {
              String RESULT =null;
		int apleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ap = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = ap.toString() + e.toString();
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ap_list",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ap_list ::= expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = e.toString();
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ap_list",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ap_list ::= 
            {
              String RESULT =null;
		
			RESULT = "";
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ap_list",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // assignment ::= IDENTIFIER selector ASSIGN expression 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			if (s.intValue() != 0)
			{
				if (s.intValue() != e.intValue())
					throw new TypeMismatchedException();
			}
			else
			{
				if (parser.get_id(id) != e.intValue())
					throw new TypeMismatchedException();
			}
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression ::= NUMBER NUMBER 
            {
              Integer RESULT =null;
			if (true)	throw new MissingOperatorException();	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= EQ expression 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			if (true)	throw new MissingOperandException();	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= expression EQ 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			if (true)	throw new MissingOperandException();	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression ::= expression EQ expression 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			if (e1.intValue() != 1 || e2.intValue() != 1)
				throw new TypeMismatchedException();
			RESULT = new Integer(2);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression ::= NEQ expression 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			if (true)	throw new MissingOperandException();	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression ::= expression NEQ 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			if (true)	throw new MissingOperandException();	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expression ::= expression NEQ expression 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			if (e1.intValue() != 1 || e2.intValue() != 1)
				throw new TypeMismatchedException("44444");
			RESULT = new Integer(2);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expression ::= LE expression 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			if (true)	throw new MissingOperandException();	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expression ::= expression LE 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			if (true)	throw new MissingOperandException();	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expression ::= expression LE expression 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			if (e1.intValue() != 1 || e2.intValue() != 1)
				throw new TypeMismatchedException("44444");
			RESULT = new Integer(2);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expression ::= LT expression 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			if (true)	throw new MissingOperandException();	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expression ::= expression LT 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			if (true)	throw new MissingOperandException();	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expression ::= expression LT expression 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			if (e1.intValue() != 1 || e2.intValue() != 1)
				throw new TypeMismatchedException("44444");
			RESULT = new Integer(2);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expression ::= GE expression 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			if (true)	throw new MissingOperandException();	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expression ::= expression GE 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			if (true)	throw new MissingOperandException();	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expression ::= expression GE expression 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			if (e1.intValue() != 1 || e2.intValue() != 1)
				throw new TypeMismatchedException();
			RESULT = new Integer(2);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expression ::= GT expression 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			if (true)	throw new MissingOperandException();	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expression ::= expression GT 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			if (true)	throw new MissingOperandException();	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expression ::= expression GT expression 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			if (e1.intValue() != 1 || e2.intValue() != 1)
				throw new TypeMismatchedException();
			RESULT = new Integer(2);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expression ::= PLUS expression 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			if (true)	throw new MissingOperandException();	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expression ::= expression PLUS 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			if (true)	throw new MissingOperandException();	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expression ::= expression PLUS expression 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			if (e1.intValue() != 1 || e2.intValue() != 1)
				throw new TypeMismatchedException();
			RESULT = e1;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expression ::= MINUS expression 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			if (true)	throw new MissingOperandException();	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expression ::= expression MINUS 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			if (true)	throw new MissingOperandException();	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expression ::= expression MINUS expression 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			if (e1.intValue() != 1 || e2.intValue() != 1)
				throw new TypeMismatchedException();
			RESULT = e1;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expression ::= TIMES expression 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			if (true)	throw new MissingOperandException();	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expression ::= expression TIMES 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			if (true)	throw new MissingOperandException();	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expression ::= expression TIMES expression 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			if (e1.intValue() != 1 || e2.intValue() != 1)
				throw new TypeMismatchedException();
			RESULT = e1;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expression ::= DIVIDE expression 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			if (true)	throw new MissingOperandException();	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expression ::= expression DIVIDE 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			if (true)	throw new MissingOperandException();	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expression ::= expression DIVIDE expression 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			if (e1.intValue() != 1 || e2.intValue() != 1)
				throw new TypeMismatchedException();
			RESULT = e1;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expression ::= MOD expression 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			if (true)	throw new MissingOperandException();	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expression ::= expression MOD 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			if (true)	throw new MissingOperandException();	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expression ::= expression MOD expression 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			if (e1.intValue() != 1 || e2.intValue() != 1)
				throw new TypeMismatchedException();
			RESULT = e1;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expression ::= AND expression 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			if (true)	throw new MissingOperandException();	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expression ::= expression AND 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			if (true)	throw new MissingOperandException();	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expression ::= expression AND expression 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			if (e1.intValue() != 2 || e2.intValue() != 2)
				throw new TypeMismatchedException();
			RESULT = e1;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expression ::= OR expression 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			if (true)	throw new MissingOperandException();	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expression ::= expression OR 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			if (true)	throw new MissingOperandException();	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expression ::= expression OR expression 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			if (e1.intValue() != 2 || e2.intValue() != 2)
				throw new TypeMismatchedException();
			RESULT = e1;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expression ::= NOT 
            {
              Integer RESULT =null;
			if (true)	throw new MissingOperandException();	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expression ::= NOT expression 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			if (e.intValue() != 2)
				throw new TypeMismatchedException();
			RESULT = e;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expression ::= LPAREN expression RPAREN 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = e;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expression ::= LPAREN RPAREN 
            {
              Integer RESULT =null;
				if (true)	throw new MissingOperandException();		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expression ::= IDENTIFIER selector 
            {
              Integer RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			if (s.intValue() != 0)
				RESULT = s;
			else
				RESULT = new Integer(parser.get_id(id));
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expression ::= NUMBER 
            {
              Integer RESULT =null;
		
			RESULT = new Integer(1);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // selector ::= selector PERIOD IDENTIFIER 
            {
              Integer RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			
			RESULT = new Integer(parser.get_id(id));	
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selector",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // selector ::= selector LBRACKET expression RBRACKET 
            {
              Integer RESULT =null;
		
			RESULT = new Integer(0);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selector",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // selector ::= 
            {
              Integer RESULT =null;
		
			RESULT = new Integer(0);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selector",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
